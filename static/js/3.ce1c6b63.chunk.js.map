{"version":3,"sources":["Components/Show.jsx","Pages/Workout/SegmentUtils.js","Config/utils.js","Pages/Workout/PreviousSessions.jsx","Pages/Workout/LockScreen.jsx","Pages/Workout/FullScreen.jsx","Pages/Workout/ChatMembers.jsx","Pages/Workout/ChatInterface.jsx","Pages/Workout/ChatBubble.jsx","Components/Stopwatch.jsx","Pages/Workout/SegmentActions.jsx","Pages/Workout/SegmentDataTable.jsx","Components/Countdown.jsx","Pages/Workout/SegmentRest.jsx","Pages/Workout/Segment.jsx","Pages/Workout/LiveSegmentView.jsx","Pages/Workout/StaticSegment.jsx","Pages/Workout/Segments.jsx","Pages/Workout/WorkoutDetail.jsx","Pages/Workout/index.jsx"],"names":["Show","condition","children","getFromLocalStorage","key","type","item","localStorage","getItem","JSON","parse","grabSegmentNotificationClass","finishTime","timeGoal","difference","getPreviousWorkoutData","identifier","getRelevantSegmentData","sessionIdentifier","segmentIdentifier","relevantSession","saveRelevantSegmentData","segmentData","savedIdentifierData","savedSessionData","newSessionData","jsonString","stringify","setItem","removeWorkoutHistory","removeItem","isLastSegment","segments","findIndex","seg","length","timeToString","time","diffInHrs","diffInMin","Math","floor","mm","diffInSec","ss","diffInMs","ms","formattedMM","toString","padStart","formattedSS","formattedMS","generateUUID","uuidv4","PreviousSessions","selectedWorkout","setActiveTab","email","useAuthState","previousSessions","Object","keys","className","tabIndex","onClick","map","index","results","displayLength","LockScreen","useState","screenLock","setScreenLock","locked","setLockedStatus","navigator","requestWakeLock","a","wakeLock","request","lock","console","error","name","message","releaseWakeLock","release","onKeyUp","e","FullScreen","document","fullscreenElement","inFullScreen","setScreenStatus","enterFullScreen","documentElement","requestFullscreen","leaveFullScreen","exitFullscreen","ChatMembers","members","count","values","member","tagType","ChatInterface","open","chatHistory","closeChat","setMessage","sendMessage","dangerouslySetInnerHTML","__html","chat","sender","id","placeholder","value","onChange","target","disabled","ChatBubble","showChat","channel","setChatHistory","unreadMessage","setUnreadStatus","setOpenStatus","useEffect","lastElement","getElementById","scrollIntoView","escFunction","keyCode","openChat","addEventListener","removeEventListener","body","classList","remove","add","formattedMessage","timestamp","Date","now","trigger","StopWatch","showFinish","onPlayCallback","onStopCallback","onFinishCallback","playing","setPlaying","startTime","setTime","elapsedTime","setElapsedTime","timerInterval","setTimerInterval","handleMainAction","clearInterval","interval","setInterval","handleFinish","alt","src","SegmentActions","workoutStarted","startClick","showStopwatch","SegmentDataTable","Countdown","state","minutesRemaining","secondsRemaining","goalInMS","getTime","props","amount","calculateMinutesRemaining","distance","tick","setState","calculateSecondsRemaining","onFinish","componentDidMount","componentWillUnmount","this","textColor","PureComponent","SegmentRest","restFinished","rest","showRestTimer","onRestFinish","Segment","segment","segmentsLength","toggleStopwatch","allResultsIn","toggleRestTimer","toggleRestFinished","myResultsIn","display_length","time_goal","description","LiveSegmentView","activeSegment","find","s","StaticSegment","Segments","onNextClick","WorkoutDetail","history","status","startWorkoutWrapper","startWorkout","mirrorSegmentData","mirrorNextSegment","Pusher","logToConsole","process","pusher","cluster","authEndpoint","auth","headers","subscribe","bind","info","newMembers","filter","reduce","obj","data","mirrorWorkout","_data","unsubscribe","unbind","disconnect","showStartWorkoutButton","Component","Workout","match","params","loading","dispatch","useAuthDispatch","activeTab","sessionFromLS","identifierFromLS","workoutStartedInitial","setWorkoutStatus","sessionIdenitiferInitial","liveSessionIdentifier","setSessionIdentifier","segmentIdentifierFromLS","setSegmentIdentifier","defaultSegmentData","setSegmentData","setWorkoutData","uuid","newIdentifier","newSegmentIdentifier","workoutStatus","getWorkout","Loader","spaceTop","undefined","currentSegmentIdentifier","currentIndex","to"],"mappings":"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","file":"static/js/3.ce1c6b63.chunk.js","sourcesContent":["const Show = ({ condition = true, children }) => {\n  if (!condition) return null;\n\n  return children;\n}\n\nexport default Show;\n","export const getFromLocalStorage = (key, type = 'string') => {\n  if (type === 'object') {\n    const item = localStorage.getItem(key) || '{}';\n    return JSON.parse(item);\n  }\n\n  const item = localStorage.getItem(key);\n  if (!item || item === 'null') return null;\n  return item;\n};\n\nexport const grabSegmentNotificationClass = (finishTime, timeGoal) => {\n  const finishTimeInSeconds = finishTime / 1000.0;\n  const difference = timeGoal - finishTimeInSeconds;\n  if (difference < -8.0) return 'has-text-danger';\n  if (difference < -4.0) return 'has-text-warning';\n\n  return 'has-text-success';\n};\n\nexport const getPreviousWorkoutData = (identifier) => {\n  return getFromLocalStorage(`liveSegmentData-${identifier}`, 'object');\n}\n\nexport const getRelevantSegmentData = (identifier, sessionIdentifier, segmentIdentifier) => {\n  const parsedSegmentData = getFromLocalStorage(`liveSegmentData-${identifier}`, 'object');\n  const relevantSession = parsedSegmentData[sessionIdentifier];\n  if (!relevantSession) return {};\n\n  return relevantSession[segmentIdentifier] || {};\n}\n\nexport const saveRelevantSegmentData = (identifier, sessionIdentifier, segmentIdentifier, segmentData) => {\n  const savedIdentifierData = getFromLocalStorage(`liveSegmentData-${identifier}`, 'object');\n  const savedSessionData = savedIdentifierData[sessionIdentifier] || {};\n  const newSessionData = {\n    ...savedSessionData,\n    [segmentIdentifier]: segmentData\n  };\n\n  const jsonString = JSON.stringify({\n    ...savedIdentifierData,\n    [sessionIdentifier]: newSessionData\n  });\n  localStorage.setItem(`liveSegmentData-${identifier}`, jsonString);\n}\n\nexport const removeWorkoutHistory = (identifier) => {\n  localStorage.removeItem(`liveSegmentData-${identifier}`);\n}\n\nexport const isLastSegment = (segmentIdentifier, segments) => {\n  if (!segmentIdentifier || !segments) return false;\n\n  const index = segments.findIndex((seg) => seg.identifier === segmentIdentifier);\n  return index === (segments.length - 1);\n}\n","import { v4 as uuidv4 } from 'uuid';\n\n// SVG Icon Links\nexport const pauseButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/pause-button_pinhpy.svg';\nexport const playButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/play-button_opkxmt.svg';\nexport const resetButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/reset-button_mdv6wf.svg';\n\n// Convert time to a format of hours, minutes, seconds, and milliseconds\nexport function timeToString(time) {\n  let diffInHrs = time / 3600000;\n  let hh = Math.floor(diffInHrs);\n\n  let diffInMin = (diffInHrs - hh) * 60;\n  let mm = Math.floor(diffInMin);\n\n  let diffInSec = (diffInMin - mm) * 60;\n  let ss = Math.floor(diffInSec);\n\n  let diffInMs = (diffInSec - ss) * 100;\n  let ms = Math.floor(diffInMs);\n\n  let formattedMM = mm.toString().padStart(2, \"0\");\n  let formattedSS = ss.toString().padStart(2, \"0\");\n  let formattedMS = ms.toString().padStart(2, \"0\");\n\n  return `${formattedMM}:${formattedSS}:${formattedMS}`;\n}\n\nexport function generateUUID() {\n  return uuidv4();\n}\n","import React from 'react';\nimport { timeToString } from '../../Config/utils';\nimport { useAuthState } from '../../Context';\nimport { getPreviousWorkoutData, grabSegmentNotificationClass, removeWorkoutHistory } from './SegmentUtils';\n\nconst PreviousSessions = ({ selectedWorkout, setActiveTab }) => {\n  const { identifier } = selectedWorkout;\n  const { email } = useAuthState();\n  const previousSessions = getPreviousWorkoutData(identifier);\n\n  if (!previousSessions || !Object.keys(previousSessions).length) {\n    return (\n      <div className='is-size-3 has-text-centered'>\n        You have not run this workout before\n      </div>\n    );\n  }\n\n  const clearHistory = () => {\n    removeWorkoutHistory(identifier);\n    setActiveTab('current');\n  };\n\n  return (\n    <>\n      <div className='button' tabIndex={0} onClick={clearHistory}>\n        Clear History\n      </div>\n\n      <div className='columns'>\n        {Object.keys(previousSessions).map((sessionIdentifier, index) => {\n          const segmentData = previousSessions[sessionIdentifier];\n\n          return (\n            <div className='column' key={sessionIdentifier}>\n              <div className='card mt-2'>\n                <div className='is-size-5 has-text-centered pt-2'>\n                  Session #{index + 1}\n                </div>\n\n                <hr className='mt-2 mb-2'/>\n\n                <div className='card-content pt-1'>\n                  <div className='content'>\n                    <table className='table is-bordered'>\n                      <thead>\n                        <tr>\n                          <th>Segment</th>\n                          <th>Goal</th>\n                          <th>Finish Time</th>\n                        </tr>\n                      </thead>\n\n                      <tbody>\n                        {Object.keys(segmentData).map(segmentIdentifier => {\n                          const results = segmentData[segmentIdentifier][email];\n\n                          return (\n                            <tr key={segmentIdentifier}>\n                              <td>{results.displayLength}</td>\n                              <td>{timeToString(results.timeGoal)}</td>\n                              <td className={`pb-1 pb-1 ${grabSegmentNotificationClass(results.finishTime, results.timeGoal)}`}>\n                                {timeToString(results.finishTime)}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default PreviousSessions;\n","import React, { useState } from 'react';\n\nconst LockScreen = () => {\n  const [screenLock, setScreenLock] = useState(null);\n  const [locked, setLockedStatus] = useState(false);\n\n  if (!('wakeLock' in navigator)) {\n    // Screen Wake Lock API is not supported 🎉\n    // - Need to be running the server in HTTPS mode\n    return null;\n  }\n\n  // Function that attempts to request a screen wake lock.\n  const requestWakeLock = async () => {\n    try {\n      const lock = await navigator.wakeLock.request('screen');\n      setScreenLock(lock);\n      setLockedStatus(true);\n    } catch (err) {\n      console.error(`${err.name}, ${err.message}`);\n    }\n  };\n  const releaseWakeLock = () => {\n    if (screenLock) screenLock.release();\n\n    setScreenLock(null);\n    setLockedStatus(false);\n  };\n\n  return (\n    <>\n      {locked ? (\n        <div className='button' tabIndex='0' onClick={releaseWakeLock} onKeyUp={(e) => e.key === 'Enter' && releaseWakeLock()}>\n          Unlock Page\n        </div>\n      ) : (\n        <div className='button' tabIndex='0' onClick={requestWakeLock} onKeyUp={(e) => e.key === 'Enter' && requestWakeLock()}>\n          Lock Page\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LockScreen;\n","import React, { useState } from 'react';\n\nconst FullScreen = () => {\n  const [inFullScreen, setScreenStatus] = useState(!!document.fullscreenElement);\n\n  const enterFullScreen = () => {\n    document.documentElement.requestFullscreen();\n    setScreenStatus(true);\n  };\n  const leaveFullScreen = () => {\n    document.exitFullscreen();\n    setScreenStatus(false);\n  };\n\n  return (\n    <>\n      {inFullScreen ? (\n        <div className='button' tabIndex='0' onClick={leaveFullScreen} onKeyUp={(e) => e.key === 'Enter' && leaveFullScreen()}>\n          Leave Full Screen\n        </div>\n      ) : (\n        <div className='button' tabIndex='0' onClick={enterFullScreen} onKeyUp={(e) => e.key === 'Enter' && enterFullScreen()}>\n          Enter Full Screen\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FullScreen;\n","import React from 'react';\nimport { useAuthState } from '../../Context';\n\nconst ChatMembers = ({ members }) => {\n  const { email } = useAuthState();\n  if (!members || members.count < 2) return null;\n\n  return (\n    <div>\n      {Object.values(members).map(member => {\n        const tagType = member.email === email ? 'is-link' : 'is-light';\n        return (\n          <div key={member.email} className={`tag mr-1 mb-1 ${tagType}`}>{member.email}</div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ChatMembers;\n","import React from 'react';\nimport { useAuthState } from '../../Context';\nimport ChatMembers from './ChatMembers';\n\nconst ChatInterface = ({ open, members, chatHistory, closeChat, message, setMessage, sendMessage }) => {\n  const { email } = useAuthState();\n\n  if (!open || !members || Object.values(members).length < 2) {\n    return null;\n  }\n\n  return (\n    <div className='chat-interface box has-background-link-light p-5'>\n      <div\n        tabIndex={0}\n        className='delete is-clickable is-size-3 close-chat-interface'\n        onClick={closeChat}\n        onKeyUp={(e) => e.key === 'Enter' && closeChat()}\n        dangerouslySetInnerHTML={{ __html: '&#215;' }}\n      />\n\n      <ChatMembers members={members} />\n\n      <div className='chat-messages box mt-2 p-3'>\n        <div className='is-full-width is-flex is-justify-content-center mb-4'>\n          <div className='tag is-dark'>This is the beginning of your conversation history</div>\n        </div>\n\n        {chatHistory.map((chat, index) => {\n          if (chat.sender === email) {\n            return (\n              <div className='is-full-width is-flex is-justify-content-flex-end mb-2' key={`chat-me-${index}`}>\n                <div className='tag is-medium is-link from-me-message is-pulled-right'>{chat.message}</div>\n              </div>\n            );\n          }\n\n          return (\n            <div className='mb-2' key={`chat-others-${index}`}>\n              <div className='tag is-medium is-light to-me-message'>{chat.message}</div>\n            </div>\n          );\n        })}\n\n        <div id='last-chat-element'></div>\n      </div>\n\n      <div className='chat-send-box box mt-2 p-3 mb-2'>\n        <div className='is-flex'>\n          <input\n            className='input is-normal'\n            type='text'\n            placeholder='Enter your message'\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyUp={(e) => e.key === 'Enter' && sendMessage()}\n          />\n\n          <div className='button is-primary ml-2' tabIndex={0} onClick={sendMessage} disabled={!message || !message.length}>\n            Send\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n","import React, { useState, useEffect } from 'react';\nimport { useAuthState } from '../../Context';\nimport ChatInterface from './ChatInterface';\n\nconst ChatBubble = ({ showChat, channel, chatHistory, setChatHistory, unreadMessage, setUnreadStatus, members }) => {\n  const [open, setOpenStatus] = useState(false);\n  const [message, setMessage] = useState('');\n  const { email } = useAuthState();\n\n  useEffect(() => {\n    const lastElement = document.getElementById('last-chat-element');\n    if (lastElement) {\n      lastElement.scrollIntoView();\n    }\n  }, [chatHistory, open]);\n\n  useEffect(() => {\n    const escFunction = (e) => {\n      if (e.keyCode !== 27) return;\n\n      openChat(false);\n    };\n\n    if (open) {\n      document.addEventListener('keydown', escFunction, false);\n    } else {\n      document.removeEventListener('keydown', escFunction, false);\n    }\n  }, [open]);  // eslint-disable-line\n\n  if (!channel || !showChat) return null;\n\n  const openChat = () => {\n    if (open) {\n      document.body.classList.remove('not-vertically-scrollable');\n    } else {\n      setUnreadStatus(false);\n      document.body.classList.add('not-vertically-scrollable');\n    }\n\n    setOpenStatus(!open);\n  };\n\n  const closeChat = () => { openChat(false) };\n\n  const sendMessage = () => {\n    if (!message || !message.length) return;\n\n    const formattedMessage = {\n      id: chatHistory.length + 1,\n      sender: email,\n      message,\n      timestamp: Date.now()\n    };\n\n    // Send message to others in the channel\n    channel.trigger('client-chat-message', formattedMessage);\n    setChatHistory([ ...chatHistory, formattedMessage ]);\n\n    setMessage('');\n  };\n\n  return (\n    <>\n      <button\n        className='button'\n        tabIndex={0}\n        onClick={openChat}\n        disabled={Object.values(members).length < 2}\n        onKeyUp={(e) => e.key === 'Enter' && openChat()}\n      >\n        Workout Chat\n        {unreadMessage && <div className='dot ml-1 has-background-primary'></div>}\n      </button>\n\n      <ChatInterface\n        open={open}\n        members={members}\n        chatHistory={chatHistory}\n        closeChat={closeChat}\n        message={message}\n        setMessage={setMessage}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n};\n\nexport default ChatBubble;\n","import React, { useEffect, useState } from 'react';\nimport { pauseButtonSrc, playButtonSrc, timeToString } from '../Config/utils';\n\nconst StopWatch = ({ showFinish = true, onPlayCallback = () => {}, onStopCallback = () => {}, onFinishCallback = () => {} }) => {\n  const [playing, setPlaying ] = useState(false);\n  const [startTime, setTime ] = useState(null);\n  const [elapsedTime, setElapsedTime ] = useState(0);\n  const [timerInterval, setTimerInterval ] = useState(null);\n\n  const handleMainAction = () => {\n    if (!playing) {\n      setTime(Date.now() - elapsedTime);\n      onPlayCallback();\n    } else {\n      clearInterval(timerInterval);\n      onStopCallback();\n    }\n\n    setPlaying(!playing);\n  };\n\n  useEffect(() => {\n    // On mount, we want to start the timer\n    handleMainAction();\n  }, []); // eslint-disable-line\n\n  useEffect(() => {\n    // With react hooks, we can't set a callback after\n    // calling setState on a state variable. To get around this,\n    // we setup an effect that triggers when startTime is changed\n    if (startTime === null) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n      setElapsedTime(0);\n    } else {\n      const interval = setInterval(function(){\n        if (startTime === null) {\n          setElapsedTime(0);\n        } else {\n          setElapsedTime(Date.now() - startTime);\n        }\n      }, 10);\n      setTimerInterval(interval);\n    }\n  }, [startTime]); // eslint-disable-line\n\n  const handleFinish = () => {\n    if (playing) {\n      handleMainAction();\n      onFinishCallback(elapsedTime);\n    }\n  };\n\n  return (\n    <div className='has-text-centered is-flex is-flex-direction-column is-align-items-center'>\n      <div className='stopwatch-circle circle is-flex is-justify-content-center is-align-items-center'>\n        <span className='time is-size-4' id='display'>\n          {elapsedTime ? timeToString(elapsedTime) : '00:00:00'}\n        </span>\n      </div>\n\n      <div className='mt-3 is-flex is-justify-content-space-between is-align-items-center'>\n        <img\n          className='is-clickable'\n          tabIndex={0}\n          id='main-action-button'\n          alt={playing ? 'pause stopwatch' : 'start stopwatch'}\n          src={playing ? pauseButtonSrc : playButtonSrc}\n          onClick={handleMainAction}\n          onKeyUp={(e) => e.key === 'Enter' && handleMainAction()}\n        />\n\n        {showFinish && playing && (\n          <div\n            className='button ml-5 is-medium'\n            tabIndex={0}\n            id='reset-button'\n            onClick={handleFinish}\n            onKeyUp={(e) => e.key === 'Enter' && handleFinish()}\n          >\n            Finish\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default StopWatch;\n","import React from 'react';\nimport Show from '../../Components/Show';\nimport StopWatch from '../../Components/Stopwatch';\n\nconst SegmentActions = ({ workoutStarted, startClick, onFinishCallback, showStopwatch }) => {\n  if (!workoutStarted) return null;\n\n  return (\n    <>\n      {!showStopwatch && (\n        <div tabIndex={0} className='button is-primary is-medium' onClick={startClick}>\n          Start\n        </div>\n      )}\n\n      <Show condition={showStopwatch}>\n        <StopWatch onFinishCallback={onFinishCallback} />\n      </Show>\n    </>\n  );\n}\n\nexport default SegmentActions;\n","import React from 'react';\nimport { timeToString } from '../../Config/utils';\nimport { grabSegmentNotificationClass } from './SegmentUtils';\n\nconst SegmentDataTable = ({ segmentData, timeGoal }) => {\n  if (!Object.keys(segmentData).length) return null;\n\n  return (\n    <>\n      <table className='table is-bordered'>\n        <thead>\n          <tr>\n            <th>User</th>\n            <th>Finish Time</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {Object.keys(segmentData).map(email => {\n            const results = segmentData[email];\n\n            return (\n              <tr key={email}>\n                <td>{email}</td>\n                <td className={`pb-1 pb-1 ${grabSegmentNotificationClass(results.finishTime, results.timeGoal)}`}>\n                  {timeToString(results.finishTime)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default SegmentDataTable;\n","import React, { PureComponent } from 'react';\n\nclass Countdown extends PureComponent {\n  state = {\n    minutesRemaining: 0,\n    secondsRemaining: 0,\n    goalInMS: new Date().getTime() + (this.props.amount * 1000)\n  };\n\n  calculateMinutesRemaining = () => {\n    // Get todays date and time\n    const now = new Date().getTime();\n    // Find the distance between now an the count down date\n    const distance = this.state.goalInMS - now;\n    return Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  }\n\n  calculateSecondsRemaining() {\n    // Get todays date and time\n    const now = new Date().getTime();\n    // Find the distance between now an the count down date\n    const distance = this.state.goalInMS - now;\n    return Math.floor((distance % (1000 * 60)) / 1000);\n  }\n\n  tick = () => {\n    this.setState({\n      minutesRemaining: this.calculateMinutesRemaining(),\n      secondsRemaining: this.calculateSecondsRemaining()\n    }, () => {\n      if (this.state.secondsRemaining <= 0 && this.state.minutesRemaining <= 0) {\n        clearInterval(this.interval);\n\n        if (this.props.onFinish) {\n          this.props.onFinish();\n        }\n      }\n    });\n  }\n\n  componentDidMount = () => {\n    this.tick();\n    this.interval = setInterval(this.tick, 1000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.interval);\n  }\n\n  get textColor() {\n    if (this.state.minutesRemaining === 0 && this.state.secondsRemaining < 30) {\n      return 'has-text-danger';\n    }\n\n    return '';\n  }\n\n  render() {\n    return (\n      <div className={this.textColor}>\n        {this.state.minutesRemaining}:{this.state.secondsRemaining} left\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\nimport Countdown from '../../Components/Countdown';\nimport Show from '../../Components/Show';\n\nconst SegmentRest = ({ restFinished, rest, showRestTimer, onRestFinish }) => {\n  return (\n    <>\n      <b className='is-size-5'>Rest</b>\n\n      <br/>\n\n      <Show condition={!restFinished}>\n        {showRestTimer ? (\n          <Countdown amount={rest} onFinish={onRestFinish} />\n        ) : (\n          <span>{rest} seconds</span>\n        )}\n      </Show>\n\n      <Show condition={restFinished}>\n        <div className='has-text-success'>\n          Get ready for the next segment!\n        </div>\n       </Show>\n    </>\n  );\n};\n\nexport default SegmentRest;\n","import React, { useEffect, useState } from 'react';\nimport Show from '../../Components/Show';\nimport { useAuthState } from '../../Context';\nimport SegmentActions from './SegmentActions';\nimport SegmentDataTable from './SegmentDataTable';\nimport SegmentRest from './SegmentRest';\n\nconst Segment = ({ segment, segmentsLength, showStopwatch, toggleStopwatch, segmentData, index, workoutStarted, segmentIdentifier, allResultsIn }) => {\n  const [showRestTimer, toggleRestTimer] = useState(false);\n  const [restFinished, toggleRestFinished] = useState(false);\n  const { email } = useAuthState();\n\n  useEffect(() => {\n    // When the identifier changes, don't show the rest timer\n    toggleRestTimer(false);\n    toggleRestFinished(false);\n  }, [segmentIdentifier]);\n\n  if (!segment) return null;\n\n  const startClick = () => {\n    toggleStopwatch(!showStopwatch);\n  };\n  const onFinishCallback = (time) => {\n    toggleStopwatch(false, time);\n    toggleRestTimer(true);\n  };\n\n  const onRestFinish = () => {\n    toggleRestTimer(false);\n    toggleRestFinished(true);\n  };\n\n  const myResultsIn = !!segmentData[email];\n\n  return (\n    <div className='mt-2'>\n      <div className='card'>\n        <div className='segment-position'>\n          {index + 1 } / {segmentsLength}\n        </div>\n\n        <div className='card-content pt-1'>\n          <div className='content'>\n            <div className='columns mt-1 is-flex'>\n              <div className='column is-half'>\n                <b className='is-size-5'>{segment.display_length} Goal</b>\n                <br/>\n                {segment.time_goal} seconds\n              </div>\n\n              <div className='column is-half'>\n                <SegmentRest rest={segment.rest} showRestTimer={showRestTimer} onRestFinish={onRestFinish} restFinished={restFinished} />\n              </div>\n            </div>\n\n            <Show condition={!myResultsIn}>\n              <SegmentActions\n                showStopwatch={showStopwatch}\n                startClick={startClick}\n                onFinishCallback={onFinishCallback}\n                workoutStarted={workoutStarted}\n              />\n            </Show>\n\n            <SegmentDataTable segmentData={segmentData} timeGoal={segment.time_goal} />\n\n            <Show condition={!allResultsIn}>\n              <hr />\n              <p>\n                {segment.description}\n              </p>\n            </Show>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Segment;\n","import React from 'react';\nimport Segment from './Segment';\n\nconst LiveSegmentView = ({ segments, segmentsLength, segmentIdentifier, ...props }) => {\n  if (!segmentsLength) return null;\n\n  const activeSegment = segments.find(s => s.identifier === segmentIdentifier);\n  const index = segments.findIndex(s => s.identifier === segmentIdentifier);\n\n  return (\n    <Segment\n      index={index}\n      segment={activeSegment}\n      segmentsLength={segmentsLength}\n      segmentIdentifier={segmentIdentifier}\n      workoutStarted={true}\n      {...props}\n    />\n  );\n}\n\nexport default LiveSegmentView;\n","import React from 'react';\n\nconst StaticSegment = ({ segment }) => (\n  <div className='column is-one-third'>\n    <div className='card'>\n      <div className='card-content pt-1'>\n        <div className='content'>\n          <div className='columns mt-1 is-flex'>\n            <div className='column is-half'>\n              <b className='is-size-5'>{segment.display_length} Goal</b>\n              <br/>\n              {segment.time_goal} seconds\n            </div>\n\n            <div className='column is-half'>\n              <b className='is-size-5'>Rest</b>\n              <br/>\n              {segment.rest} seconds\n            </div>\n          </div>\n\n          <hr />\n\n          <p>\n            {segment.description}\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default StaticSegment;\n","import React from 'react';\nimport Show from '../../Components/Show';\nimport { useAuthState } from '../../Context';\nimport LiveSegmentView from './LiveSegmentView';\nimport { isLastSegment } from './SegmentUtils';\nimport StaticSegment from './StaticSegment';\n\nconst Segments = ({ selectedWorkout, segmentIdentifier, segmentData, showStopwatch, toggleStopwatch, ...props }) => {\n  const { email } = useAuthState();\n  if (!selectedWorkout.segments.length) {\n    return (\n      <p className='mb-3'>\n        Workout cannot start. No segments added yet :(\n      </p>\n    );\n  }\n\n  const segments = selectedWorkout.segments;\n  const segmentsLength = segments.length;\n  const myResultsIn = !!segmentData[email];\n  const allResultsIn = Object.keys(segmentData).length === Object.keys(props.members).length;\n\n  if (segmentIdentifier) {\n    return (\n      <>\n        <Show condition={myResultsIn && allResultsIn}>\n          <div className='button is-primary mt-2 mb-1' tabIndex={0} onClick={props.onNextClick}>\n            {isLastSegment(segmentIdentifier, segments) ? 'Conclude Workout' : 'Next Segment'}\n          </div>\n        </Show>\n\n        <LiveSegmentView\n          segments={segments}\n          segmentsLength={segmentsLength}\n          segmentIdentifier={segmentIdentifier}\n          segmentData={segmentData}\n          showStopwatch={showStopwatch}\n          toggleStopwatch={toggleStopwatch}\n          allResultsIn={allResultsIn}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className='is-size-3 mb-5'>\n        {segmentsLength} Total {segmentsLength === 1 ? 'Segment' : 'Segments'}\n      </div>\n\n      <div className='segments columns'>\n        {segments.map((segment) => (\n          <StaticSegment\n            key={segment.identifier}\n            segment={segment}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Segments;\n","import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport LockScreen from './LockScreen';\nimport FullScreen from './FullScreen';\nimport ChatBubble from './ChatBubble';\nimport Segments from './Segments';\nimport ChatMembers from './ChatMembers';\nimport Show from '../../Components/Show';\n\nclass WorkoutDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatHistory: [],\n      unreadMessage: false,\n      members: [],\n      showChat: false,\n      showStopwatch: false\n    };\n\n    // Enable pusher logging - not enabled in any environment except local\n    Pusher.logToConsole = process.env.NODE_ENV === 'development';\n\n    this.pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY, {\n      cluster: process.env.REACT_APP_PUSHER_CLUSTER,\n      authEndpoint: `${process.env.REACT_APP_ROOT_URL}/pusher/auth`,\n      auth: {\n        headers: { 'Authorization': localStorage.getItem('currentUserToken') || '' }\n      }\n    });\n\n    this.channel = this.pusher.subscribe(`presence-workoutChannel-${this.identifier}`);\n  }\n\n  get identifier() {\n    const { identifier } = this.props.selectedWorkout;\n    return identifier;\n  }\n\n  componentDidMount() {\n    this.channel.bind('pusher:subscription_succeeded', function(info) {\n      this.setState({ members: info.members, showChat: true });\n    }, this);\n\n    this.channel.bind('pusher:member_added', function(member) {\n      const newMembers = {\n        ...this.state.members,\n        [member.id]: member.info\n      }\n      this.setState({ members: newMembers });\n    }, this);\n\n    this.channel.bind('pusher:member_removed', function(member) {\n      const newMembers = Object.keys(this.state.members)\n        .filter(key => `${key}` !== `${member.id}`)\n        .reduce((obj, key) => {\n          obj[key] = this.state.members[key];\n          return obj;\n        }, {});\n\n      this.setState({ members: newMembers });\n    }, this);\n\n    this.channel.bind('client-chat-message', (data) => {\n      this.setState({\n        chatHistory: [\n          ...this.state.chatHistory,\n          {\n            ...data\n          }\n        ],\n        unreadMessage: true\n      });\n    }, this);\n\n    this.channel.bind('client-workout-started', (data) => {\n      this.props.mirrorWorkout(data);\n    }, this);\n\n    this.channel.bind('client-segment-started', (_data) => {\n      // Event from another user starting a segment\n      this.setState({ showStopwatch: true });\n    }, this);\n\n    this.channel.bind('client-segment-finished', (segmentData) => {\n      // Event from another user finishing a segment\n      this.props.mirrorSegmentData(segmentData);\n    }, this);\n\n    this.channel.bind('client-segment-next', (_data) => {\n      // Event from another user going to the next segment\n      this.props.mirrorNextSegment();\n    }, this);\n  }\n\n  componentWillUnmount() {\n    this.pusher.unsubscribe(`presence-workoutChannel-${this.identifier}`);\n\n    if (this.channel) {\n      this.channel.unbind();\n    }\n\n    this.pusher.disconnect();\n\n    document.body.classList.remove('not-vertically-scrollable');\n  }\n\n  setChatHistory = (history) => {\n    this.setState({ chatHistory: history });\n  }\n\n  setUnreadStatus = (status) => {\n    this.setState({ unreadMessage: status });\n  }\n\n  get showStartWorkoutButton() {\n    if (this.props.workoutStarted) return false;\n\n    return !!this.props.selectedWorkout.segments.length;\n  }\n\n  startWorkoutWrapper = () => {\n    this.props.startWorkout(this.channel);\n  }\n\n  toggleStopwatch = (value, finishTime = null) => {\n    if (value) {\n      this.channel.trigger('client-segment-started', {});\n    } else {\n      const segment = this.props.selectedWorkout.segments.find(s => s.identifier === this.props.segmentIdentifier);\n      const segmentData = { email: this.props.email, results: {\n        finishTime,\n        timeGoal: segment.time_goal,\n        displayLength: segment.display_length\n      }};\n      this.channel.trigger('client-segment-finished', segmentData);\n      this.props.mirrorSegmentData(segmentData);\n    }\n\n    this.setState({ showStopwatch: value });\n  }\n\n  onNextClick = () => {\n    this.props.mirrorNextSegment();\n    this.channel.trigger('client-segment-next', {});\n  }\n\n  render() {\n    return (\n      <>\n        <div className='buttons'>\n          <Show condition={this.showStartWorkoutButton}>\n            <div tabIndex={0} className='button is-primary' onClick={this.startWorkoutWrapper}>\n              Start Workout\n            </div>\n          </Show>\n\n          <LockScreen />\n          <FullScreen />\n        </div>\n\n        <Show condition={Object.values(this.state.members).length > 1}>\n          <ChatBubble\n            channel={this.channel}\n            setChatHistory={this.setChatHistory}\n            setUnreadStatus={this.setUnreadStatus}\n            {...this.state}\n          />\n          <ChatMembers members={this.state.members} />\n        </Show>\n\n        <Segments\n          selectedWorkout={this.props.selectedWorkout}\n          segmentIdentifier={this.props.segmentIdentifier}\n          segmentData={this.props.segmentData}\n          showStopwatch={this.state.showStopwatch}\n          toggleStopwatch={this.toggleStopwatch}\n          members={this.state.members}\n          onNextClick={this.onNextClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default WorkoutDetail;\n","import React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Loader from '../../Components/Loader';\nimport Show from '../../Components/Show';\nimport { generateUUID } from '../../Config/utils';\nimport { useAuthDispatch, useAuthState } from '../../Context';\nimport { getWorkout } from '../../Context/actions';\nimport PreviousSessions from './PreviousSessions';\nimport { getFromLocalStorage, getRelevantSegmentData, saveRelevantSegmentData } from './SegmentUtils';\nimport WorkoutDetail from './WorkoutDetail';\n\nconst Workout = ({ match }) => {\n  const { params: { identifier } } = match;\n  const { selectedWorkout, error, loading, email } = useAuthState();\n  const dispatch = useAuthDispatch();\n  const [activeTab, setActiveTab] = useState('current');\n\n  const sessionFromLS = getFromLocalStorage('liveSessionIdentifier', 'string');\n  const identifierFromLS = getFromLocalStorage('liveWorkoutIdentifier', 'string');\n  const workoutStartedInitial = !!sessionFromLS && identifier === identifierFromLS;\n\n  const [workoutStarted, setWorkoutStatus] = useState(workoutStartedInitial);\n  const sessionIdenitiferInitial = workoutStartedInitial ? sessionFromLS : null;\n  const [liveSessionIdentifier, setSessionIdentifier] = useState(sessionIdenitiferInitial);\n\n  const segmentIdentifierFromLS = getFromLocalStorage('liveSegmentIdentifier', 'string');\n  const [segmentIdentifier, setSegmentIdentifier] = useState(segmentIdentifierFromLS);\n\n  const defaultSegmentData = getRelevantSegmentData(identifier, liveSessionIdentifier, segmentIdentifier);\n  const [segmentData, setSegmentData] = useState(defaultSegmentData);\n\n  const setWorkoutData = (uuid, newIdentifier, newSegmentIdentifier, workoutStatus = true) => {\n    localStorage.setItem('liveSessionIdentifier', uuid);\n    localStorage.setItem('liveWorkoutIdentifier', newIdentifier);\n    localStorage.setItem('liveSegmentIdentifier', newSegmentIdentifier);\n\n    setWorkoutStatus(workoutStatus);\n    setSessionIdentifier(uuid);\n    setSegmentIdentifier(newSegmentIdentifier);\n    setSegmentData({});\n  };\n\n  const startWorkout = (channel = null) => {\n    const uuid = generateUUID();\n    const currentSegmentIdentifier = selectedWorkout.segments[0].identifier;\n    setWorkoutData(uuid, identifier, currentSegmentIdentifier);\n\n    if (channel) {\n      channel.trigger('client-workout-started', { uuid, identifier, currentSegmentIdentifier });\n    }\n  };\n\n  const mirrorNextSegment = () => {\n    const currentIndex = selectedWorkout.segments.findIndex(s => s.identifier === segmentIdentifier);\n    let newSegmentIdentifier;\n    if ((currentIndex + 1) >= selectedWorkout.segments.length) {\n      newSegmentIdentifier = null;\n    } else {\n      newSegmentIdentifier = selectedWorkout.segments[currentIndex + 1].identifier;\n    }\n\n    localStorage.setItem('liveSegmentIdentifier', newSegmentIdentifier);\n    saveRelevantSegmentData(identifier, liveSessionIdentifier, segmentIdentifier, segmentData);\n    setSegmentIdentifier(newSegmentIdentifier);\n    setSegmentData({});\n    if (newSegmentIdentifier === null) {\n      setWorkoutData(null, null, null, false);\n      setActiveTab('previous');\n    }\n  }\n\n  const mirrorSegmentData = (data) => {\n    setSegmentData({\n      ...segmentData,\n      [data.email]: data.results\n    });\n  }\n\n  const mirrorWorkout = (data) => {\n    setWorkoutData(data.uuid, data.identifier, data.currentSegmentIdentifier);\n  };\n\n  useEffect(() => {\n    getWorkout(identifier, dispatch);\n  }, [identifier, dispatch]);\n\n  if (loading) {\n    return <Loader spaceTop='mt-5' />;\n  } else if (!selectedWorkout || !Object.keys(selectedWorkout).length) {\n    return (\n      <div className='has-text-centered'>\n        <h1 className='is-size-3'>{error}</h1>\n        <NavLink to='/workouts' className='button mt-3'>Return to My Workouts</NavLink>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className='pattern-cross-dots-xl is-flex is-align-items-center is-justify-content-center neg-ml-5 neg-mr-5 border-bottom-primary-1 is-flex-direction-column'>\n        <div className='tag is-medium mt-2 mb-2'>\n          {selectedWorkout.name}\n        </div>\n        <Show condition={workoutStarted}>\n          <div className='tag is-small is-primary mb-2' key={liveSessionIdentifier}>\n            Active\n          </div>\n        </Show>\n      </div>\n\n      <Show condition={!workoutStarted}>\n        <div className='tabs is-medium'>\n          <ul>\n            <li className={activeTab === 'current' ? 'is-active' : undefined}>\n              {/* eslint-disable-next-line */}\n              <a className='tab' onClick={() => setActiveTab('current')}>\n                Current\n              </a>\n            </li>\n\n            <li className={activeTab === 'previous' ? 'is-active' : undefined}>\n              {/* eslint-disable-next-line */}\n              <a className='tab' onClick={() => setActiveTab('previous')}>\n                Previous Sessions\n              </a>\n            </li>\n          </ul>\n        </div>\n      </Show>\n\n      <div className='ml-5 mr-5 mt-2'>\n        {activeTab === 'current' && (\n          <WorkoutDetail\n            selectedWorkout={selectedWorkout}\n            workoutStarted={workoutStarted}\n            startWorkout={startWorkout}\n            mirrorWorkout={mirrorWorkout}\n            segmentIdentifier={segmentIdentifier}\n            segmentData={segmentData}\n            mirrorSegmentData={mirrorSegmentData}\n            mirrorNextSegment={mirrorNextSegment}\n            email={email}\n          />\n        )}\n\n        {activeTab === 'previous' && <PreviousSessions selectedWorkout={selectedWorkout} setActiveTab={setActiveTab} />}\n      </div>\n    </>\n  );\n}\n\nexport default Workout;\n"],"sourceRoot":""}