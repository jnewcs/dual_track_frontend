{"version":3,"sources":["Components/Show.jsx","Config/utils.js","Pages/Workout/SegmentUtils.js","Pages/Workout/PreviousSessions.jsx","Pages/Workout/LockScreen.jsx","Pages/Workout/FullScreen.jsx","Pages/Workout/ChatMembers.jsx","Pages/Workout/ChatInterface.jsx","Pages/Workout/ChatBubble.jsx","Components/Stopwatch.jsx","Pages/Workout/SegmentActions.jsx","Pages/Workout/SegmentDataTable.jsx","Components/Countdown.jsx","Pages/Workout/SegmentRest.jsx","Pages/Workout/Segment.jsx","Pages/Workout/LiveSegmentView.jsx","Pages/Workout/StaticSegment.jsx","Pages/Workout/Segments.jsx","Pages/Workout/WorkoutDetail.jsx","Pages/Workout/index.jsx"],"names":["Show","condition","children","timeToString","time","diffInHrs","diffInMin","Math","floor","mm","diffInSec","ss","diffInMs","ms","formattedMM","toString","padStart","formattedSS","formattedMS","generateUUID","uuidv4","grabSegmentNotificationClass","finishTime","timeGoal","difference","PreviousSessions","selectedWorkout","setActiveTab","identifier","email","useAuthState","previousSessions","segmentDataFromLS","localStorage","getItem","JSON","parse","getPreviousWorkoutData","Object","keys","length","className","class","tabindex","onClick","removeItem","removeWorkoutHistory","map","sessionIdentifier","index","segmentData","segmentIdentifier","results","displayLength","LockScreen","useState","screenLock","setScreenLock","locked","setLockedStatus","navigator","requestWakeLock","a","wakeLock","request","lock","console","error","name","message","releaseWakeLock","release","tabIndex","onKeyUp","e","key","FullScreen","document","fullscreenElement","inFullScreen","setScreenStatus","enterFullScreen","documentElement","requestFullscreen","leaveFullScreen","exitFullscreen","ChatMembers","members","count","values","member","tagType","ChatInterface","open","chatHistory","closeChat","setMessage","sendMessage","dangerouslySetInnerHTML","__html","chat","sender","id","type","placeholder","value","onChange","target","disabled","ChatBubble","showChat","channel","setChatHistory","unreadMessage","setUnreadStatus","setOpenStatus","useEffect","lastElement","getElementById","scrollIntoView","escFunction","keyCode","openChat","addEventListener","removeEventListener","body","classList","remove","add","formattedMessage","timestamp","Date","now","trigger","StopWatch","showFinish","onPlayCallback","onStopCallback","onFinishCallback","playing","setPlaying","startTime","setTime","elapsedTime","setElapsedTime","timerInterval","setTimerInterval","handleMainAction","clearInterval","interval","setInterval","handleFinish","alt","src","SegmentActions","workoutStarted","startClick","showStopwatch","SegmentDataTable","Countdown","state","minutesRemaining","secondsRemaining","goalInMS","getTime","props","amount","calculateMinutesRemaining","distance","tick","setState","calculateSecondsRemaining","onFinish","componentDidMount","componentWillUnmount","this","textColor","PureComponent","SegmentRest","restFinished","rest","showRestTimer","onRestFinish","Segment","segment","segmentsLength","toggleStopwatch","toggleRestTimer","toggleRestFinished","myResultsIn","display_length","time_goal","description","LiveSegmentView","segments","activeSegment","find","s","findIndex","StaticSegment","Segments","allResultsIn","onNextClick","WorkoutDetail","history","status","startWorkoutWrapper","startWorkout","mirrorSegmentData","mirrorNextSegment","Pusher","logToConsole","process","pusher","cluster","authEndpoint","auth","headers","subscribe","bind","info","newMembers","filter","reduce","obj","data","mirrorWorkout","_data","unsubscribe","unbind","disconnect","showStartWorkoutButton","Component","Workout","match","params","loading","dispatch","useAuthDispatch","activeTab","sessionFromLS","identifierFromLS","workoutStartedInitial","setWorkoutStatus","sessionIdenitiferInitial","liveSessionIdentifier","setSessionIdentifier","segmentIdentifierFromLS","setSegmentIdentifier","defaultSegmentData","relevantSession","getRelevantSegmentData","setSegmentData","setWorkoutData","uuid","newIdentifier","newSegmentIdentifier","workoutStatus","setItem","getWorkout","Loader","spaceTop","undefined","currentSegmentIdentifier","currentIndex","saved","savedIdentifierData","savedSessionData","newSessionData","jsonString","stringify","saveRelevantSegmentData","to"],"mappings":"2HAMeA,IANF,SAAC,GAAoC,IAAD,IAAjCC,iBAAiC,SAAfC,EAAe,EAAfA,SAChC,OAAKD,EAEEC,EAFgB,O,wGCOlB,SAASC,EAAaC,GAC3B,IAAIC,EAAYD,EAAO,KAGnBE,EAA+B,IAAlBD,EAFRE,KAAKC,MAAMH,IAGhBI,EAAKF,KAAKC,MAAMF,GAEhBI,EAA+B,IAAlBJ,EAAYG,GACzBE,EAAKJ,KAAKC,MAAME,GAEhBE,EAA8B,KAAlBF,EAAYC,GACxBE,EAAKN,KAAKC,MAAMI,GAEhBE,EAAcL,EAAGM,WAAWC,SAAS,EAAG,KACxCC,EAAcN,EAAGI,WAAWC,SAAS,EAAG,KACxCE,EAAcL,EAAGE,WAAWC,SAAS,EAAG,KAE5C,MAAM,GAAN,OAAUF,EAAV,YAAyBG,EAAzB,YAAwCC,GAGnC,SAASC,IACd,OAAOC,c,mBC7BIC,EAA+B,SAACC,EAAYC,GACvD,IACMC,EAAaD,EADSD,EAAa,IAEzC,OAAIE,GAAc,EAAY,kBAC1BA,GAAc,EAAY,mBAEvB,oB,OC0EMC,EA3EU,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,aACnCC,EAAeF,EAAfE,WACAC,EAAUC,cAAVD,MACFE,EDC8B,SAACH,GACrC,IAAMI,EAAoBC,aAAaC,QAAb,0BAAwCN,KAAiB,KACnF,OAAOO,KAAKC,MAAMJ,GCHOK,CAAuBT,GAEhD,IAAKG,IAAqBO,OAAOC,KAAKR,GAAkBS,OACtD,OACE,qBAAKC,UAAU,8BAAf,kDAWJ,OACE,qCACE,qBAAKC,MAAM,SAASC,SAAU,EAAGC,QAPhB,YDqBa,SAAChB,GACnCK,aAAaY,WAAb,0BAA2CjB,ICrBzCkB,CAAqBlB,GACrBD,EAAa,YAKX,2BAIA,qBAAKc,UAAU,UAAf,SACGH,OAAOC,KAAKR,GAAkBgB,KAAI,SAACC,EAAmBC,GACrD,IAAMC,EAAcnB,EAAiBiB,GAErC,OACE,qBAAKP,UAAU,SAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,mCAAf,sBACYQ,EAAQ,KAGpB,oBAAIR,UAAU,cAEd,qBAAKA,UAAU,oBAAf,SACE,qBAAKA,UAAU,UAAf,SACE,wBAAOA,UAAU,oBAAjB,UACE,gCACE,+BACE,yCACA,sCACA,kDAIJ,gCACGH,OAAOC,KAAKW,GAAaH,KAAI,SAAAI,GAC5B,IAAMC,EAAUF,EAAYC,GAAmBtB,GAE/C,OACE,+BACE,6BAAKuB,EAAQC,gBACb,6BAAKlD,EAAaiD,EAAQ7B,YAC1B,oBAAIkB,UAAS,oBAAepB,EAA6B+B,EAAQ9B,WAAY8B,EAAQ7B,WAArF,SACGpB,EAAaiD,EAAQ9B,gBAJjB6B,mBAxBIH,Y,iFCU1BM,EA1CI,WAAO,IAAD,EACaC,mBAAS,MADtB,mBAChBC,EADgB,KACJC,EADI,OAEWF,oBAAS,GAFpB,mBAEhBG,EAFgB,KAERC,EAFQ,KAIvB,KAAM,aAAcC,WAGlB,OAAO,KAIT,IAAMC,EAAe,uCAAG,4BAAAC,EAAA,+EAEDF,UAAUG,SAASC,QAAQ,UAF1B,OAEdC,EAFc,OAGpBR,EAAcQ,GACdN,GAAgB,GAJI,gDAMpBO,QAAQC,MAAR,UAAiB,KAAIC,KAArB,aAA8B,KAAIC,UANd,yDAAH,qDASfC,EAAkB,WAClBd,GAAYA,EAAWe,UAE3Bd,EAAc,MACdE,GAAgB,IAGlB,OACE,mCACGD,EACC,qBAAKjB,UAAU,SAAS+B,SAAS,IAAI5B,QAAS0B,EAAiBG,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBL,KAApG,yBAIA,qBAAK7B,UAAU,SAAS+B,SAAS,IAAI5B,QAASiB,EAAiBY,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBd,KAApG,0BCPOe,EA3BI,WAAO,IAAD,EACiBrB,qBAAWsB,SAASC,mBADrC,mBAChBC,EADgB,KACFC,EADE,KAGjBC,EAAkB,WACtBJ,SAASK,gBAAgBC,oBACzBH,GAAgB,IAEZI,EAAkB,WACtBP,SAASQ,iBACTL,GAAgB,IAGlB,OACE,mCACGD,EACC,qBAAKtC,UAAU,SAAS+B,SAAS,IAAI5B,QAASwC,EAAiBX,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBS,KAApG,+BAIA,qBAAK3C,UAAU,SAAS+B,SAAS,IAAI5B,QAASqC,EAAiBR,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBM,KAApG,kCCFOK,EAhBK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb1D,EAAUC,cAAVD,MACR,OAAK0D,GAAWA,EAAQC,MAAQ,EAAU,KAGxC,8BACGlD,OAAOmD,OAAOF,GAASxC,KAAI,SAAA2C,GAC1B,IAAMC,EAAUD,EAAO7D,QAAUA,EAAQ,UAAY,WACrD,OACE,qBAAwBY,UAAS,wBAAmBkD,GAApD,SAAgED,EAAO7D,OAA7D6D,EAAO7D,aCuDZ+D,EA/DO,SAAC,GAAiF,IAA/EC,EAA8E,EAA9EA,KAAMN,EAAwE,EAAxEA,QAASO,EAA+D,EAA/DA,YAAaC,EAAkD,EAAlDA,UAAW1B,EAAuC,EAAvCA,QAAS2B,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YAC3EpE,EAAUC,cAAVD,MAER,OAAKgE,IAASN,GAAWjD,OAAOmD,OAAOF,GAAS/C,OAAS,EAChD,KAIP,sBAAKC,UAAU,mDAAf,UACE,qBACE+B,SAAU,EACV/B,UAAU,qDACVG,QAASmD,EACTtB,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBoB,KACrCG,wBAAyB,CAAEC,OAAQ,YAGrC,cAAC,EAAD,CAAaZ,QAASA,IAEtB,sBAAK9C,UAAU,6BAAf,UACE,qBAAKA,UAAU,uDAAf,SACE,qBAAKA,UAAU,cAAf,kEAGDqD,EAAY/C,KAAI,SAACqD,EAAMnD,GACtB,OAAImD,EAAKC,SAAWxE,EAEhB,qBAAKY,UAAU,yDAAf,SACE,qBAAKA,UAAU,wDAAf,SAAwE2D,EAAK/B,WAD/E,kBAAwFpB,IAO1F,qBAAKR,UAAU,OAAf,SACE,qBAAKA,UAAU,uCAAf,SAAuD2D,EAAK/B,WAD9D,sBAA0CpB,OAM9C,qBAAKqD,GAAG,yBAGV,qBAAK7D,UAAU,kCAAf,SACE,sBAAKA,UAAU,UAAf,UACE,uBACEA,UAAU,kBACV8D,KAAK,OACLC,YAAY,qBACZC,MAAOpC,EACPqC,SAAU,SAAChC,GAAD,OAAOsB,EAAWtB,EAAEiC,OAAOF,QACrChC,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBsB,OAGvC,qBAAKxD,UAAU,yBAAyB+B,SAAU,EAAG5B,QAASqD,EAAaW,UAAWvC,IAAYA,EAAQ7B,OAA1G,2BC8BKqE,EApFI,SAAC,GAAiG,IAA/FC,EAA8F,EAA9FA,SAAUC,EAAoF,EAApFA,QAASjB,EAA2E,EAA3EA,YAAakB,EAA8D,EAA9DA,eAAgBC,EAA8C,EAA9CA,cAAeC,EAA+B,EAA/BA,gBAAiB3B,EAAc,EAAdA,QAAc,EACpFhC,oBAAS,GAD2E,mBAC3GsC,EAD2G,KACrGsB,EADqG,OAEpF5D,mBAAS,IAF2E,mBAE3Gc,EAF2G,KAElG2B,EAFkG,KAG1GnE,EAAUC,cAAVD,MAuBR,GArBAuF,qBAAU,WACR,IAAMC,EAAcxC,SAASyC,eAAe,qBACxCD,GACFA,EAAYE,mBAEb,CAACzB,EAAaD,IAEjBuB,qBAAU,WACR,IAAMI,EAAc,SAAC9C,GACD,KAAdA,EAAE+C,SAENC,GAAS,IAGP7B,EACFhB,SAAS8C,iBAAiB,UAAWH,GAAa,GAElD3C,SAAS+C,oBAAoB,UAAWJ,GAAa,KAEtD,CAAC3B,KAECkB,IAAYD,EAAU,OAAO,KAElC,IAAMY,EAAW,WACX7B,EACFhB,SAASgD,KAAKC,UAAUC,OAAO,8BAE/Bb,GAAgB,GAChBrC,SAASgD,KAAKC,UAAUE,IAAI,8BAG9Bb,GAAetB,IAsBjB,OACE,qCACE,yBACEpD,UAAU,SACV+B,SAAU,EACV5B,QAAS8E,EACTd,SAAUtE,OAAOmD,OAAOF,GAAS/C,OAAS,EAC1CiC,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmB+C,KALvC,yBAQGT,GAAiB,qBAAKxE,UAAU,uCAGnC,cAAC,EAAD,CACEoD,KAAMA,EACNN,QAASA,EACTO,YAAaA,EACbC,UApCY,WAAQ2B,GAAS,IAqC7BrD,QAASA,EACT2B,WAAYA,EACZC,YArCc,WAClB,GAAK5B,GAAYA,EAAQ7B,OAAzB,CAEA,IAAMyF,EAAmB,CACvB3B,GAAIR,EAAYtD,OAAS,EACzB6D,OAAQxE,EACRwC,UACA6D,UAAWC,KAAKC,OAIlBrB,EAAQsB,QAAQ,sBAAuBJ,GACvCjB,EAAe,GAAD,mBAAMlB,GAAN,CAAmBmC,KAEjCjC,EAAW,Y,QC6BAsC,EArFG,SAAC,GAA8G,IAAD,IAA3GC,kBAA2G,aAAxFC,sBAAwF,MAAvE,aAAuE,MAA7DC,sBAA6D,MAA5C,aAA4C,MAAlCC,wBAAkC,MAAf,aAAe,IAC/FnF,oBAAS,GADsF,mBACvHoF,EADuH,KAC9GC,EAD8G,OAEhGrF,mBAAS,MAFuF,mBAEvHsF,EAFuH,KAE5GC,EAF4G,OAGvFvF,mBAAS,GAH8E,mBAGvHwF,EAHuH,KAG1GC,EAH0G,OAInFzF,mBAAS,MAJ0E,mBAIvH0F,EAJuH,KAIxGC,EAJwG,KAMxHC,EAAmB,WAClBR,GAIHS,cAAcH,GACdR,MAJAK,EAAQX,KAAKC,MAAQW,GACrBP,KAMFI,GAAYD,IAGdvB,qBAAU,WAER+B,MACC,IAEH/B,qBAAU,WAIR,GAAkB,OAAdyB,EACFO,cAAcH,GACdC,EAAiB,MACjBF,EAAe,OACV,CACL,IAAMK,EAAWC,aAAY,WAEzBN,EADgB,OAAdH,EACa,EAEAV,KAAKC,MAAQS,KAE7B,IACHK,EAAiBG,MAElB,CAACR,IAEJ,IAAMU,EAAe,WACfZ,IACFQ,IACAT,EAAiBK,KAIrB,OACE,sBAAKtG,UAAU,2EAAf,UACE,qBAAKA,UAAU,kFAAf,SACE,sBAAMA,UAAU,iBAAiB6D,GAAG,UAApC,SACGyC,EAAc5I,EAAa4I,GAAe,eAI/C,sBAAKtG,UAAU,sEAAf,UACE,qBACEA,UAAU,eACV+B,SAAU,EACV8B,GAAG,qBACHkD,IAAKb,EAAU,kBAAoB,kBACnCc,IAAKd,ERhEe,gHACD,+GQgEnB/F,QAASuG,EACT1E,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmBwE,OAGtCZ,GAAcI,GACb,qBACElG,UAAU,wBACV+B,SAAU,EACV8B,GAAG,eACH1D,QAAS2G,EACT9E,QAAS,SAACC,GAAD,MAAiB,UAAVA,EAAEC,KAAmB4E,KALvC,2BCnDKG,EAlBQ,SAAC,GAAqE,IAAnEC,EAAkE,EAAlEA,eAAgBC,EAAkD,EAAlDA,WAAYlB,EAAsC,EAAtCA,iBAAkBmB,EAAoB,EAApBA,cACtE,OAAKF,EAGH,sCACIE,GACA,qBAAKrF,SAAU,EAAG/B,UAAU,8BAA8BG,QAASgH,EAAnE,mBAKF,cAAC5J,EAAA,EAAD,CAAMC,UAAW4J,EAAjB,SACE,cAAC,EAAD,CAAWnB,iBAAkBA,SAXP,MC+BfoB,EAhCU,SAAC,GAA+B,IAA7B5G,EAA4B,EAA5BA,YAA4B,EAAf3B,SACvC,OAAKe,OAAOC,KAAKW,GAAaV,OAG5B,mCACE,wBAAOC,UAAU,oBAAjB,UACE,gCACE,+BACE,sCACA,kDAIJ,gCACGH,OAAOC,KAAKW,GAAaH,KAAI,SAAAlB,GAC5B,IAAMuB,EAAUF,EAAYrB,GAE5B,OACE,+BACE,6BAAKA,IACL,oBAAIY,UAAS,oBAAepB,EAA6B+B,EAAQ9B,WAAY8B,EAAQ7B,WAArF,SACGpB,EAAaiD,EAAQ9B,gBAHjBO,aAjBwB,MC6DhCkI,E,4MA/DbC,MAAQ,CACNC,iBAAkB,EAClBC,iBAAkB,EAClBC,UAAU,IAAIhC,MAAOiC,UAAiC,IAApB,EAAKC,MAAMC,Q,EAG/CC,0BAA4B,WAE1B,IAAMnC,GAAM,IAAID,MAAOiC,UAEjBI,EAAW,EAAKR,MAAMG,SAAW/B,EACvC,OAAO7H,KAAKC,MAAOgK,EAAQ,KAAT,M,EAWpBC,KAAO,WACL,EAAKC,SAAS,CACZT,iBAAkB,EAAKM,4BACvBL,iBAAkB,EAAKS,8BACtB,WACG,EAAKX,MAAME,kBAAoB,GAAK,EAAKF,MAAMC,kBAAoB,IACrEb,cAAc,EAAKC,UAEf,EAAKgB,MAAMO,UACb,EAAKP,MAAMO,gB,EAMnBC,kBAAoB,WAClB,EAAKJ,OACL,EAAKpB,SAAWC,YAAY,EAAKmB,KAAM,M,EAGzCK,qBAAuB,WACrB1B,cAAc,EAAKC,W,+DA7BrB,WAEE,IAAMjB,GAAM,IAAID,MAAOiC,UAEjBI,EAAWO,KAAKf,MAAMG,SAAW/B,EACvC,OAAO7H,KAAKC,MAAOgK,EAAQ,IAAkB,O,qBA2B/C,WACE,OAAoC,IAAhCO,KAAKf,MAAMC,kBAA0Bc,KAAKf,MAAME,iBAAmB,GAC9D,kBAGF,K,oBAGT,WACE,OACE,sBAAKzH,UAAWsI,KAAKC,UAArB,UACGD,KAAKf,MAAMC,iBADd,IACiCc,KAAKf,MAAME,iBAD5C,e,GAzDkBe,iBC0BTC,EAxBK,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,aAAcC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACxD,OACE,qCACE,mBAAG7I,UAAU,YAAb,kBAEA,uBAEA,cAACzC,EAAA,EAAD,CAAMC,WAAYkL,EAAlB,SACGE,EACC,cAAC,EAAD,CAAWf,OAAQc,EAAMR,SAAUU,IAEnC,iCAAOF,EAAP,gBAIJ,cAACpL,EAAA,EAAD,CAAMC,UAAWkL,EAAjB,SACE,qBAAK1I,UAAU,mBAAf,mDC2DO8I,EAxEC,SAAC,GAAwH,IAAtHC,EAAqH,EAArHA,QAASC,EAA4G,EAA5GA,eAAgB5B,EAA4F,EAA5FA,cAAe6B,EAA6E,EAA7EA,gBAAiBxI,EAA4D,EAA5DA,YAAaD,EAA+C,EAA/CA,MAAO0G,EAAwC,EAAxCA,eAAgBxG,EAAwB,EAAxBA,kBAAwB,EAC7FI,oBAAS,GADoF,mBAC/H8H,EAD+H,KAChHM,EADgH,OAE3FpI,oBAAS,GAFkF,mBAE/H4H,EAF+H,KAEjHS,EAFiH,KAG9H/J,EAAUC,cAAVD,MAQR,GANAuF,qBAAU,WAERuE,GAAgB,GAChBC,GAAmB,KAClB,CAACzI,KAECqI,EAAS,OAAO,KAErB,IAaMK,IAAgB3I,EAAYrB,GAElC,OACE,qBAAKY,UAAU,OAAf,SACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,mBAAf,UACGQ,EAAQ,EADX,MACkBwI,KAGlB,qBAAKhJ,UAAU,oBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,oBAAGA,UAAU,YAAb,UAA0B+I,EAAQM,eAAlC,WACA,uBACCN,EAAQO,UAHX,cAMA,qBAAKtJ,UAAU,iBAAf,SACE,cAAC,EAAD,CAAa2I,KAAMI,EAAQJ,KAAMC,cAAeA,EAAeC,aAxBxD,WACnBK,GAAgB,GAChBC,GAAmB,IAsBoFT,aAAcA,SAI7G,cAACnL,EAAA,EAAD,CAAMC,WAAY4L,EAAlB,SACE,cAAC,EAAD,CACEhC,cAAeA,EACfD,WAvCK,WACjB8B,GAAiB7B,IAuCLnB,iBArCW,SAACtI,GACxBsL,GAAgB,EAAOtL,GACvBuL,GAAgB,IAoCJhC,eAAgBA,MAIpB,cAAC,EAAD,CAAkBzG,YAAaA,EAAa3B,SAAUiK,EAAQO,YAE9D,uBAEA,4BACGP,EAAQQ,yBC/CRC,EApBS,SAAC,GAAkG,IAAhGC,EAA+F,EAA/FA,SAAUT,EAAqF,EAArFA,eAAgBtI,EAAqE,EAArEA,kBAAmBD,EAAkD,EAAlDA,YAAa2G,EAAqC,EAArCA,cAAe6B,EAAsB,EAAtBA,gBAClG,IAAKD,EAAgB,OAAO,KAE5B,IAAMU,EAAgBD,EAASE,MAAK,SAAAC,GAAC,OAAIA,EAAEzK,aAAeuB,KACpDF,EAAQiJ,EAASI,WAAU,SAAAD,GAAC,OAAIA,EAAEzK,aAAeuB,KAEvD,OACE,cAAC,EAAD,CACEF,MAAOA,EACPuI,QAASW,EACTV,eAAgBA,EAChBtI,kBAAmBA,EACnBwG,gBAAgB,EAChBzG,YAAaA,EACb2G,cAAeA,EACf6B,gBAAiBA,KCcRa,EA9BO,SAAC,GAAD,IAAGf,EAAH,EAAGA,QAAH,OACpB,qBAAK/I,UAAU,sBAAf,SACE,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,sBAAKA,UAAU,UAAf,UACE,sBAAKA,UAAU,uBAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,oBAAGA,UAAU,YAAb,UAA0B+I,EAAQM,eAAlC,WACA,uBACCN,EAAQO,UAHX,cAMA,sBAAKtJ,UAAU,iBAAf,UACE,mBAAGA,UAAU,YAAb,kBACA,uBACC+I,EAAQJ,KAHX,iBAOF,uBAEA,4BACGI,EAAQQ,wBCoCNQ,EAtDE,SAAC,GAAmG,IAAjG9K,EAAgG,EAAhGA,gBAAiByB,EAA+E,EAA/EA,kBAAmBD,EAA4D,EAA5DA,YAAa2G,EAA+C,EAA/CA,cAAe6B,EAAgC,EAAhCA,gBAAoBrB,EAAY,uGAC1GxI,EAAUC,cAAVD,MACR,IAAKH,EAAgBwK,SAAS1J,OAC5B,OACE,mBAAGC,UAAU,OAAb,4DAMJ,IAAMyJ,EAAWxK,EAAgBwK,SAC3BT,EAAiBS,EAAS1J,OAC1BqJ,IAAgB3I,EAAYrB,GAC5B4K,EAAenK,OAAOC,KAAKW,GAAaV,SAAWF,OAAOC,KAAK8H,EAAM9E,SAAS/C,OAEpF,OAAIW,EAEA,qCACE,cAACnD,EAAA,EAAD,CAAMC,UAAW4L,GAAeY,EAAhC,SACE,qBAAKhK,UAAU,8BAA8B+B,SAAU,EAAG5B,QAASyH,EAAMqC,YAAzE,4BAKF,cAAC,EAAD,CACER,SAAUA,EACVT,eAAgBA,EAChBtI,kBAAmBA,EACnBD,YAAaA,EACb2G,cAAeA,EACf6B,gBAAiBA,OAOvB,qCACE,sBAAKjJ,UAAU,iBAAf,UACGgJ,EADH,UAC6C,IAAnBA,EAAuB,UAAY,cAG7D,qBAAKhJ,UAAU,mBAAf,SACGyJ,EAASnJ,KAAI,SAACyI,GAAD,OACZ,cAAC,EAAD,CAEEA,QAASA,GADJA,EAAQ5J,qBCsIV+K,E,kDA/Kb,WAAYtC,GAAQ,IAAD,8BACjB,cAAMA,IAgGRrD,eAAiB,SAAC4F,GAChB,EAAKlC,SAAS,CAAE5E,YAAa8G,KAlGZ,EAqGnB1F,gBAAkB,SAAC2F,GACjB,EAAKnC,SAAS,CAAEzD,cAAe4F,KAtGd,EA+GnBC,oBAAsB,WACpB,EAAKzC,MAAM0C,aAAa,EAAKhG,UAhHZ,EAmHnB2E,gBAAkB,SAACjF,GAA8B,IAAvBnF,EAAsB,uDAAT,KACrC,GAAImF,EACF,EAAKM,QAAQsB,QAAQ,yBAA0B,QAC1C,CACL,IAAMmD,EAAU,EAAKnB,MAAM3I,gBAAgBwK,SAASE,MAAK,SAAAC,GAAC,OAAIA,EAAEzK,aAAe,EAAKyI,MAAMlH,qBACpFD,EAAc,CAAErB,MAAO,EAAKwI,MAAMxI,MAAOuB,QAAS,CACtD9B,aACAC,SAAUiK,EAAQO,UAClB1I,cAAemI,EAAQM,iBAEzB,EAAK/E,QAAQsB,QAAQ,0BAA2BnF,GAChD,EAAKmH,MAAM2C,kBAAkB9J,GAG/B,EAAKwH,SAAS,CAAEb,cAAepD,KAjId,EAoInBiG,YAAc,WACZ,EAAKrC,MAAM4C,oBACX,EAAKlG,QAAQsB,QAAQ,sBAAuB,KApI5C,EAAK2B,MAAQ,CACXlE,YAAa,GACbmB,eAAe,EACf1B,QAAS,GACTuB,UAAU,EACV+C,eAAe,GAIjBqD,IAAOC,cAAeC,EAEtB,EAAKC,OAAS,IAAIH,IAAOE,uBAAkC,CACzDE,QAASF,MACTG,aAAa,GAAD,OAAKH,8CAAL,gBACZI,KAAM,CACJC,QAAS,CAAE,cAAiBxL,aAAaC,QAAQ,qBAAuB,OAI5E,EAAK6E,QAAU,EAAKsG,OAAOK,UAAZ,kCAAiD,EAAK9L,aArBpD,E,4CAwBnB,WAEE,OADuBmJ,KAAKV,MAAM3I,gBAA1BE,a,+BAIV,WAAqB,IAAD,OAClBmJ,KAAKhE,QAAQ4G,KAAK,iCAAiC,SAASC,GAC1D7C,KAAKL,SAAS,CAAEnF,QAASqI,EAAKrI,QAASuB,UAAU,MAChDiE,MAEHA,KAAKhE,QAAQ4G,KAAK,uBAAuB,SAASjI,GAChD,IAAMmI,EAAU,2BACX9C,KAAKf,MAAMzE,SADA,kBAEbG,EAAOY,GAAKZ,EAAOkI,OAEtB7C,KAAKL,SAAS,CAAEnF,QAASsI,MACxB9C,MAEHA,KAAKhE,QAAQ4G,KAAK,yBAAyB,SAASjI,GAAS,IAAD,OACpDmI,EAAavL,OAAOC,KAAKwI,KAAKf,MAAMzE,SACvCuI,QAAO,SAAAnJ,GAAG,MAAI,UAAGA,KAAH,UAAgBe,EAAOY,OACrCyH,QAAO,SAACC,EAAKrJ,GAEZ,OADAqJ,EAAIrJ,GAAO,EAAKqF,MAAMzE,QAAQZ,GACvBqJ,IACN,IAELjD,KAAKL,SAAS,CAAEnF,QAASsI,MACxB9C,MAEHA,KAAKhE,QAAQ4G,KAAK,uBAAuB,SAACM,GACxC,EAAKvD,SAAS,CACZ5E,YAAY,GAAD,mBACN,EAAKkE,MAAMlE,aADL,gBAGJmI,KAGPhH,eAAe,MAEhB8D,MAEHA,KAAKhE,QAAQ4G,KAAK,0BAA0B,SAACM,GAC3C,EAAK5D,MAAM6D,cAAcD,KACxBlD,MAEHA,KAAKhE,QAAQ4G,KAAK,0BAA0B,SAACQ,GAE3C,EAAKzD,SAAS,CAAEb,eAAe,MAC9BkB,MAEHA,KAAKhE,QAAQ4G,KAAK,2BAA2B,SAACzK,GAE5C,EAAKmH,MAAM2C,kBAAkB9J,KAC5B6H,MAEHA,KAAKhE,QAAQ4G,KAAK,uBAAuB,SAACQ,GAExC,EAAK9D,MAAM4C,sBACVlC,Q,kCAGL,WACEA,KAAKsC,OAAOe,YAAZ,kCAAmDrD,KAAKnJ,aAEpDmJ,KAAKhE,SACPgE,KAAKhE,QAAQsH,SAGftD,KAAKsC,OAAOiB,aAEZzJ,SAASgD,KAAKC,UAAUC,OAAO,+B,kCAWjC,WACE,OAAIgD,KAAKV,MAAMV,kBAENoB,KAAKV,MAAM3I,gBAAgBwK,SAAS1J,S,oBA6B/C,WACE,OACE,qCACE,sBAAKC,UAAU,UAAf,UACE,cAACzC,EAAA,EAAD,CAAMC,UAAW8K,KAAKwD,uBAAtB,SACE,qBAAK/J,SAAU,EAAG/B,UAAU,oBAAoBG,QAASmI,KAAK+B,oBAA9D,6BAKF,cAAC,EAAD,IACA,cAAC,EAAD,OAGF,eAAC9M,EAAA,EAAD,CAAMC,UAAWqC,OAAOmD,OAAOsF,KAAKf,MAAMzE,SAAS/C,OAAS,EAA5D,UACE,cAAC,EAAD,aACEuE,QAASgE,KAAKhE,QACdC,eAAgB+D,KAAK/D,eACrBE,gBAAiB6D,KAAK7D,iBAClB6D,KAAKf,QAEX,cAAC,EAAD,CAAazE,QAASwF,KAAKf,MAAMzE,aAGnC,cAAC,EAAD,CACE7D,gBAAiBqJ,KAAKV,MAAM3I,gBAC5ByB,kBAAmB4H,KAAKV,MAAMlH,kBAC9BD,YAAa6H,KAAKV,MAAMnH,YACxB2G,cAAekB,KAAKf,MAAMH,cAC1B6B,gBAAiBX,KAAKW,gBACtBnG,QAASwF,KAAKf,MAAMzE,QACpBmH,YAAa3B,KAAK2B,qB,GAzKA8B,aC8IbC,UA5IC,SAAC,GAAe,IACZ7M,EADW,EAAZ8M,MACTC,OAAU/M,WADW,EAEsBE,cAA3CJ,EAFqB,EAErBA,gBAAiByC,EAFI,EAEJA,MAAOyK,EAFH,EAEGA,QAAS/M,EAFZ,EAEYA,MACnCgN,EAAWC,cAHY,EAIKvL,mBAAS,WAJd,mBAItBwL,EAJsB,KAIXpN,EAJW,KAMvBqN,EAAgB/M,aAAaC,QAAQ,0BAA4B,KACjE+M,EAAmBhN,aAAaC,QAAQ,0BAA4B,KACpEgN,IAA0BF,GAAiBpN,IAAeqN,EARnC,EAUc1L,mBAAS2L,GAVvB,mBAUtBvF,EAVsB,KAUNwF,EAVM,KAWvBC,EAA2BF,EAAwBF,EAAgB,KAX5C,EAYyBzL,mBAAS6L,GAZlC,mBAYtBC,EAZsB,KAYCC,EAZD,KAcvBC,EAA0BtN,aAAaC,QAAQ,0BAA4B,KAdpD,EAeqBqB,mBAASgM,GAf9B,mBAetBpM,EAfsB,KAeHqM,EAfG,KAiBvBC,EjBd8B,SAAC7N,EAAYoB,EAAmBG,GACpE,IAAMnB,EAAoBC,aAAaC,QAAb,0BAAwCN,KAAiB,KAE7E8N,EADoBvN,KAAKC,MAAMJ,GACKgB,GAC1C,OAAK0M,GAEEA,EAAgBvM,IAFM,GiBUFwM,CAAuB/N,EAAYyN,EAAuBlM,GAjBxD,EAkBSI,mBAASkM,GAlBlB,mBAkBtBvM,EAlBsB,KAkBT0M,EAlBS,KAoBvBC,EAAiB,SAACC,EAAMC,EAAeC,GAAgD,IAA1BC,IAAyB,yDAC1FhO,aAAaiO,QAAQ,wBAAyBJ,GAC9C7N,aAAaiO,QAAQ,wBAAyBH,GAC9C9N,aAAaiO,QAAQ,wBAAyBF,GAE9Cb,EAAiBc,GACjBX,EAAqBQ,GACrBN,EAAqBQ,GACrBJ,EAAe,KA+CjB,OAJAxI,qBAAU,WACR+I,YAAWvO,EAAYiN,KACtB,CAACjN,EAAYiN,IAEZD,EACK,cAACwB,EAAA,EAAD,CAAQC,SAAS,SACd3O,GAAoBY,OAAOC,KAAKb,GAAiBc,OAU3D,qCACE,sBAAKC,UAAU,mJAAf,UACE,qBAAKA,UAAU,0BAAf,SACGf,EAAgB0C,OAEnB,cAACpE,EAAA,EAAD,CAAMC,UAAW0J,EAAjB,SACE,qBAAKlH,UAAU,+BAAf,mBAAmD4M,QAMvD,cAACrP,EAAA,EAAD,CAAMC,WAAY0J,EAAlB,SACE,qBAAKlH,UAAU,iBAAf,SACE,+BACE,oBAAIA,UAAyB,YAAdsM,EAA0B,iBAAcuB,EAAvD,SAEE,mBAAG7N,UAAU,MAAMG,QAAS,kBAAMjB,EAAa,YAA/C,uBAKF,oBAAIc,UAAyB,aAAdsM,EAA2B,iBAAcuB,EAAxD,SAEE,mBAAG7N,UAAU,MAAMG,QAAS,kBAAMjB,EAAa,aAA/C,wCAQR,sBAAKc,UAAU,iBAAf,UACiB,YAAdsM,GACC,cAAC,EAAD,CACErN,gBAAiBA,EACjBiI,eAAgBA,EAChBoD,aA7FW,WAAqB,IAApBhG,EAAmB,uDAAT,KACxB+I,EAAO3O,IACPoP,EAA2B7O,EAAgBwK,SAAS,GAAGtK,WAC7DiO,EAAeC,EAAMlO,EAAY2O,GAE7BxJ,GACFA,EAAQsB,QAAQ,yBAA0B,CAAEyH,OAAMlO,aAAY2O,8BAwFxDrC,cA1DY,SAACD,GACrB4B,EAAe5B,EAAK6B,KAAM7B,EAAKrM,WAAYqM,EAAKsC,2BA0DxCpN,kBAAmBA,EACnBD,YAAaA,EACb8J,kBApEgB,SAACiB,GACzB2B,EAAe,2BACV1M,GADS,kBAEX+K,EAAKpM,MAAQoM,EAAK7K,YAkEb6J,kBAxFgB,WACxB,IACI+C,EADEQ,EAAe9O,EAAgBwK,SAASI,WAAU,SAAAD,GAAC,OAAIA,EAAEzK,aAAeuB,KAG5E6M,EADGQ,EAAe,GAAM9O,EAAgBwK,SAAS1J,OAC1B,KAEAd,EAAgBwK,SAASsE,EAAe,GAAG5O,WAGpEK,aAAaiO,QAAQ,wBAAyBF,GjBtCX,SAACpO,EAAYoB,EAAmBG,EAAmBD,GACxF,IAAMuN,EAAQxO,aAAaC,QAAb,0BAAwCN,KAAiB,KACjE8O,EAAsBvO,KAAKC,MAAMqO,GACjCE,EAAmBD,EAAoB1N,IAAsB,GAC7D4N,EAAc,2BACfD,GADe,kBAEjBxN,EAAoBD,IAGjB2N,EAAa1O,KAAK2O,UAAL,2BACdJ,GADc,kBAEhB1N,EAAoB4N,KAEvB3O,aAAaiO,QAAb,0BAAwCtO,GAAciP,GiB0BpDE,CAAwBnP,EAAYyN,EAAuBlM,EAAmBD,GAC9EsM,EAAqBQ,GACrBJ,EAAe,IACc,OAAzBI,IACFH,EAAe,KAAM,KAAM,MAAM,GACjClO,EAAa,cA0EPE,MAAOA,IAII,aAAdkN,GAA4B,cAAC,EAAD,CAAkBrN,gBAAiBA,EAAiBC,aAAcA,UAvDjG,sBAAKc,UAAU,oBAAf,UACE,oBAAIA,UAAU,YAAd,SAA2B0B,IAC3B,cAAC,IAAD,CAAS6M,GAAG,YAAYvO,UAAU,cAAlC","file":"static/js/4.5b791746.chunk.js","sourcesContent":["const Show = ({ condition = true, children }) => {\n  if (!condition) return null;\n\n  return children;\n}\n\nexport default Show;\n","import { v4 as uuidv4 } from 'uuid';\n\n// SVG Icon Links\nexport const pauseButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/pause-button_pinhpy.svg';\nexport const playButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/play-button_opkxmt.svg';\nexport const resetButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/reset-button_mdv6wf.svg';\n\n// Convert time to a format of hours, minutes, seconds, and milliseconds\nexport function timeToString(time) {\n  let diffInHrs = time / 3600000;\n  let hh = Math.floor(diffInHrs);\n\n  let diffInMin = (diffInHrs - hh) * 60;\n  let mm = Math.floor(diffInMin);\n\n  let diffInSec = (diffInMin - mm) * 60;\n  let ss = Math.floor(diffInSec);\n\n  let diffInMs = (diffInSec - ss) * 100;\n  let ms = Math.floor(diffInMs);\n\n  let formattedMM = mm.toString().padStart(2, \"0\");\n  let formattedSS = ss.toString().padStart(2, \"0\");\n  let formattedMS = ms.toString().padStart(2, \"0\");\n\n  return `${formattedMM}:${formattedSS}:${formattedMS}`;\n}\n\nexport function generateUUID() {\n  return uuidv4();\n}\n","export const grabSegmentNotificationClass = (finishTime, timeGoal) => {\n  const finishTimeInSeconds = finishTime / 1000.0;\n  const difference = timeGoal - finishTimeInSeconds;\n  if (difference < -8.0) return 'has-text-danger';\n  if (difference < -4.0) return 'has-text-warning';\n\n  return 'has-text-success';\n};\n\nexport const getPreviousWorkoutData = (identifier) => {\n  const segmentDataFromLS = localStorage.getItem(`liveSegmentData-${identifier}`) || \"{}\";\n  return JSON.parse(segmentDataFromLS);\n}\n\nexport const getRelevantSegmentData = (identifier, sessionIdentifier, segmentIdentifier) => {\n  const segmentDataFromLS = localStorage.getItem(`liveSegmentData-${identifier}`) || \"{}\";\n  const parsedSegmentData = JSON.parse(segmentDataFromLS);\n  const relevantSession = parsedSegmentData[sessionIdentifier];\n  if (!relevantSession) return {};\n\n  return relevantSession[segmentIdentifier] || {};\n}\n\nexport const saveRelevantSegmentData = (identifier, sessionIdentifier, segmentIdentifier, segmentData) => {\n  const saved = localStorage.getItem(`liveSegmentData-${identifier}`) || \"{}\";\n  const savedIdentifierData = JSON.parse(saved);\n  const savedSessionData = savedIdentifierData[sessionIdentifier] || {};\n  const newSessionData = {\n    ...savedSessionData,\n    [segmentIdentifier]: segmentData\n  };\n\n  const jsonString = JSON.stringify({\n    ...savedIdentifierData,\n    [sessionIdentifier]: newSessionData\n  });\n  localStorage.setItem(`liveSegmentData-${identifier}`, jsonString);\n}\n\nexport const removeWorkoutHistory = (identifier) => {\n  localStorage.removeItem(`liveSegmentData-${identifier}`);\n}\n","import React from 'react';\nimport { timeToString } from '../../Config/utils';\nimport { useAuthState } from '../../Context';\nimport { getPreviousWorkoutData, grabSegmentNotificationClass, removeWorkoutHistory } from './SegmentUtils';\n\nconst PreviousSessions = ({ selectedWorkout, setActiveTab }) => {\n  const { identifier } = selectedWorkout;\n  const { email } = useAuthState();\n  const previousSessions = getPreviousWorkoutData(identifier);\n\n  if (!previousSessions || !Object.keys(previousSessions).length) {\n    return (\n      <div className='is-size-3 has-text-centered'>\n        You have not run this workout before\n      </div>\n    );\n  }\n\n  const clearHistory = () => {\n    removeWorkoutHistory(identifier);\n    setActiveTab('current');\n  };\n\n  return (\n    <>\n      <div class=\"button\" tabindex={0} onClick={clearHistory}>\n        Clear History\n      </div>\n\n      <div className='columns'>\n        {Object.keys(previousSessions).map((sessionIdentifier, index) => {\n          const segmentData = previousSessions[sessionIdentifier];\n\n          return (\n            <div className='column' key={sessionIdentifier}>\n              <div className='card mt-2'>\n                <div className='is-size-5 has-text-centered pt-2'>\n                  Session #{index + 1}\n                </div>\n\n                <hr className='mt-2 mb-2'/>\n\n                <div className='card-content pt-1'>\n                  <div className='content'>\n                    <table className='table is-bordered'>\n                      <thead>\n                        <tr>\n                          <th>Segment</th>\n                          <th>Goal</th>\n                          <th>Finish Time</th>\n                        </tr>\n                      </thead>\n\n                      <tbody>\n                        {Object.keys(segmentData).map(segmentIdentifier => {\n                          const results = segmentData[segmentIdentifier][email];\n\n                          return (\n                            <tr key={segmentIdentifier}>\n                              <td>{results.displayLength}</td>\n                              <td>{timeToString(results.timeGoal)}</td>\n                              <td className={`pb-1 pb-1 ${grabSegmentNotificationClass(results.finishTime, results.timeGoal)}`}>\n                                {timeToString(results.finishTime)}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default PreviousSessions;\n","import React, { useState } from 'react';\n\nconst LockScreen = () => {\n  const [screenLock, setScreenLock] = useState(null);\n  const [locked, setLockedStatus] = useState(false);\n\n  if (!('wakeLock' in navigator)) {\n    // Screen Wake Lock API is not supported 🎉\n    // - Need to be running the server in HTTPS mode\n    return null;\n  }\n\n  // Function that attempts to request a screen wake lock.\n  const requestWakeLock = async () => {\n    try {\n      const lock = await navigator.wakeLock.request('screen');\n      setScreenLock(lock);\n      setLockedStatus(true);\n    } catch (err) {\n      console.error(`${err.name}, ${err.message}`);\n    }\n  };\n  const releaseWakeLock = () => {\n    if (screenLock) screenLock.release();\n\n    setScreenLock(null);\n    setLockedStatus(false);\n  };\n\n  return (\n    <>\n      {locked ? (\n        <div className='button' tabIndex='0' onClick={releaseWakeLock} onKeyUp={(e) => e.key === 'Enter' && releaseWakeLock()}>\n          Unlock Page\n        </div>\n      ) : (\n        <div className='button' tabIndex='0' onClick={requestWakeLock} onKeyUp={(e) => e.key === 'Enter' && requestWakeLock()}>\n          Lock Page\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LockScreen;\n","import React, { useState } from 'react';\n\nconst FullScreen = () => {\n  const [inFullScreen, setScreenStatus] = useState(!!document.fullscreenElement);\n\n  const enterFullScreen = () => {\n    document.documentElement.requestFullscreen();\n    setScreenStatus(true);\n  };\n  const leaveFullScreen = () => {\n    document.exitFullscreen();\n    setScreenStatus(false);\n  };\n\n  return (\n    <>\n      {inFullScreen ? (\n        <div className='button' tabIndex='0' onClick={leaveFullScreen} onKeyUp={(e) => e.key === 'Enter' && leaveFullScreen()}>\n          Leave Full Screen\n        </div>\n      ) : (\n        <div className='button' tabIndex='0' onClick={enterFullScreen} onKeyUp={(e) => e.key === 'Enter' && enterFullScreen()}>\n          Enter Full Screen\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FullScreen;\n","import React from 'react';\nimport { useAuthState } from '../../Context';\n\nconst ChatMembers = ({ members }) => {\n  const { email } = useAuthState();\n  if (!members || members.count < 2) return null;\n\n  return (\n    <div>\n      {Object.values(members).map(member => {\n        const tagType = member.email === email ? 'is-link' : 'is-light';\n        return (\n          <div key={member.email} className={`tag mr-1 mb-1 ${tagType}`}>{member.email}</div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ChatMembers;\n","import React from 'react';\nimport { useAuthState } from '../../Context';\nimport ChatMembers from './ChatMembers';\n\nconst ChatInterface = ({ open, members, chatHistory, closeChat, message, setMessage, sendMessage }) => {\n  const { email } = useAuthState();\n\n  if (!open || !members || Object.values(members).length < 2) {\n    return null;\n  }\n\n  return (\n    <div className='chat-interface box has-background-link-light p-5'>\n      <div\n        tabIndex={0}\n        className='delete is-clickable is-size-3 close-chat-interface'\n        onClick={closeChat}\n        onKeyUp={(e) => e.key === 'Enter' && closeChat()}\n        dangerouslySetInnerHTML={{ __html: '&#215;' }}\n      />\n\n      <ChatMembers members={members} />\n\n      <div className='chat-messages box mt-2 p-3'>\n        <div className='is-full-width is-flex is-justify-content-center mb-4'>\n          <div className='tag is-dark'>This is the beginning of your conversation history</div>\n        </div>\n\n        {chatHistory.map((chat, index) => {\n          if (chat.sender === email) {\n            return (\n              <div className='is-full-width is-flex is-justify-content-flex-end mb-2' key={`chat-me-${index}`}>\n                <div className='tag is-medium is-link from-me-message is-pulled-right'>{chat.message}</div>\n              </div>\n            );\n          }\n\n          return (\n            <div className='mb-2' key={`chat-others-${index}`}>\n              <div className='tag is-medium is-light to-me-message'>{chat.message}</div>\n            </div>\n          );\n        })}\n\n        <div id='last-chat-element'></div>\n      </div>\n\n      <div className='chat-send-box box mt-2 p-3 mb-2'>\n        <div className='is-flex'>\n          <input\n            className='input is-normal'\n            type='text'\n            placeholder='Enter your message'\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyUp={(e) => e.key === 'Enter' && sendMessage()}\n          />\n\n          <div className='button is-primary ml-2' tabIndex={0} onClick={sendMessage} disabled={!message || !message.length}>\n            Send\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n","import React, { useState, useEffect } from 'react';\nimport { useAuthState } from '../../Context';\nimport ChatInterface from './ChatInterface';\n\nconst ChatBubble = ({ showChat, channel, chatHistory, setChatHistory, unreadMessage, setUnreadStatus, members }) => {\n  const [open, setOpenStatus] = useState(false);\n  const [message, setMessage] = useState('');\n  const { email } = useAuthState();\n\n  useEffect(() => {\n    const lastElement = document.getElementById('last-chat-element');\n    if (lastElement) {\n      lastElement.scrollIntoView();\n    }\n  }, [chatHistory, open]);\n\n  useEffect(() => {\n    const escFunction = (e) => {\n      if (e.keyCode !== 27) return;\n\n      openChat(false);\n    };\n\n    if (open) {\n      document.addEventListener('keydown', escFunction, false);\n    } else {\n      document.removeEventListener('keydown', escFunction, false);\n    }\n  }, [open]);  // eslint-disable-line\n\n  if (!channel || !showChat) return null;\n\n  const openChat = () => {\n    if (open) {\n      document.body.classList.remove('not-vertically-scrollable');\n    } else {\n      setUnreadStatus(false);\n      document.body.classList.add('not-vertically-scrollable');\n    }\n\n    setOpenStatus(!open);\n  };\n\n  const closeChat = () => { openChat(false) };\n\n  const sendMessage = () => {\n    if (!message || !message.length) return;\n\n    const formattedMessage = {\n      id: chatHistory.length + 1,\n      sender: email,\n      message,\n      timestamp: Date.now()\n    };\n\n    // Send message to others in the channel\n    channel.trigger('client-chat-message', formattedMessage);\n    setChatHistory([ ...chatHistory, formattedMessage ]);\n\n    setMessage('');\n  };\n\n  return (\n    <>\n      <button\n        className='button'\n        tabIndex={0}\n        onClick={openChat}\n        disabled={Object.values(members).length < 2}\n        onKeyUp={(e) => e.key === 'Enter' && openChat()}\n      >\n        Workout Chat\n        {unreadMessage && <div className='dot ml-1 has-background-primary'></div>}\n      </button>\n\n      <ChatInterface\n        open={open}\n        members={members}\n        chatHistory={chatHistory}\n        closeChat={closeChat}\n        message={message}\n        setMessage={setMessage}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n};\n\nexport default ChatBubble;\n","import React, { useEffect, useState } from 'react';\nimport { pauseButtonSrc, playButtonSrc, timeToString } from '../Config/utils';\n\nconst StopWatch = ({ showFinish = true, onPlayCallback = () => {}, onStopCallback = () => {}, onFinishCallback = () => {} }) => {\n  const [playing, setPlaying ] = useState(false);\n  const [startTime, setTime ] = useState(null);\n  const [elapsedTime, setElapsedTime ] = useState(0);\n  const [timerInterval, setTimerInterval ] = useState(null);\n\n  const handleMainAction = () => {\n    if (!playing) {\n      setTime(Date.now() - elapsedTime);\n      onPlayCallback();\n    } else {\n      clearInterval(timerInterval);\n      onStopCallback();\n    }\n\n    setPlaying(!playing);\n  };\n\n  useEffect(() => {\n    // On mount, we want to start the timer\n    handleMainAction();\n  }, []); // eslint-disable-line\n\n  useEffect(() => {\n    // With react hooks, we can't set a callback after\n    // calling setState on a state variable. To get around this,\n    // we setup an effect that triggers when startTime is changed\n    if (startTime === null) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n      setElapsedTime(0);\n    } else {\n      const interval = setInterval(function(){\n        if (startTime === null) {\n          setElapsedTime(0);\n        } else {\n          setElapsedTime(Date.now() - startTime);\n        }\n      }, 10);\n      setTimerInterval(interval);\n    }\n  }, [startTime]); // eslint-disable-line\n\n  const handleFinish = () => {\n    if (playing) {\n      handleMainAction();\n      onFinishCallback(elapsedTime);\n    }\n  };\n\n  return (\n    <div className='has-text-centered is-flex is-flex-direction-column is-align-items-center'>\n      <div className='stopwatch-circle circle is-flex is-justify-content-center is-align-items-center'>\n        <span className='time is-size-4' id='display'>\n          {elapsedTime ? timeToString(elapsedTime) : '00:00:00'}\n        </span>\n      </div>\n\n      <div className='mt-3 is-flex is-justify-content-space-between is-align-items-center'>\n        <img\n          className='is-clickable'\n          tabIndex={0}\n          id='main-action-button'\n          alt={playing ? 'pause stopwatch' : 'start stopwatch'}\n          src={playing ? pauseButtonSrc : playButtonSrc}\n          onClick={handleMainAction}\n          onKeyUp={(e) => e.key === 'Enter' && handleMainAction()}\n        />\n\n        {showFinish && playing && (\n          <div\n            className='button ml-5 is-medium'\n            tabIndex={0}\n            id='reset-button'\n            onClick={handleFinish}\n            onKeyUp={(e) => e.key === 'Enter' && handleFinish()}\n          >\n            Finish\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default StopWatch;\n","import React from 'react';\nimport Show from '../../Components/Show';\nimport StopWatch from '../../Components/Stopwatch';\n\nconst SegmentActions = ({ workoutStarted, startClick, onFinishCallback, showStopwatch }) => {\n  if (!workoutStarted) return null;\n\n  return (\n    <>\n      {!showStopwatch && (\n        <div tabIndex={0} className='button is-primary is-medium' onClick={startClick}>\n          Start\n        </div>\n      )}\n\n      <Show condition={showStopwatch}>\n        <StopWatch onFinishCallback={onFinishCallback} />\n      </Show>\n    </>\n  );\n}\n\nexport default SegmentActions;\n","import React from 'react';\nimport { timeToString } from '../../Config/utils';\nimport { grabSegmentNotificationClass } from './SegmentUtils';\n\nconst SegmentDataTable = ({ segmentData, timeGoal }) => {\n  if (!Object.keys(segmentData).length) return null;\n\n  return (\n    <>\n      <table className='table is-bordered'>\n        <thead>\n          <tr>\n            <th>User</th>\n            <th>Finish Time</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {Object.keys(segmentData).map(email => {\n            const results = segmentData[email];\n\n            return (\n              <tr key={email}>\n                <td>{email}</td>\n                <td className={`pb-1 pb-1 ${grabSegmentNotificationClass(results.finishTime, results.timeGoal)}`}>\n                  {timeToString(results.finishTime)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default SegmentDataTable;\n","import React, { PureComponent } from 'react';\n\nclass Countdown extends PureComponent {\n  state = {\n    minutesRemaining: 0,\n    secondsRemaining: 0,\n    goalInMS: new Date().getTime() + (this.props.amount * 1000)\n  };\n\n  calculateMinutesRemaining = () => {\n    // Get todays date and time\n    const now = new Date().getTime();\n    // Find the distance between now an the count down date\n    const distance = this.state.goalInMS - now;\n    return Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  }\n\n  calculateSecondsRemaining() {\n    // Get todays date and time\n    const now = new Date().getTime();\n    // Find the distance between now an the count down date\n    const distance = this.state.goalInMS - now;\n    return Math.floor((distance % (1000 * 60)) / 1000);\n  }\n\n  tick = () => {\n    this.setState({\n      minutesRemaining: this.calculateMinutesRemaining(),\n      secondsRemaining: this.calculateSecondsRemaining()\n    }, () => {\n      if (this.state.secondsRemaining <= 0 && this.state.minutesRemaining <= 0) {\n        clearInterval(this.interval);\n\n        if (this.props.onFinish) {\n          this.props.onFinish();\n        }\n      }\n    });\n  }\n\n  componentDidMount = () => {\n    this.tick();\n    this.interval = setInterval(this.tick, 1000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.interval);\n  }\n\n  get textColor() {\n    if (this.state.minutesRemaining === 0 && this.state.secondsRemaining < 30) {\n      return 'has-text-danger';\n    }\n\n    return '';\n  }\n\n  render() {\n    return (\n      <div className={this.textColor}>\n        {this.state.minutesRemaining}:{this.state.secondsRemaining} left\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\nimport Countdown from '../../Components/Countdown';\nimport Show from '../../Components/Show';\n\nconst SegmentRest = ({ restFinished, rest, showRestTimer, onRestFinish }) => {\n  return (\n    <>\n      <b className='is-size-5'>Rest</b>\n\n      <br/>\n\n      <Show condition={!restFinished}>\n        {showRestTimer ? (\n          <Countdown amount={rest} onFinish={onRestFinish} />\n        ) : (\n          <span>{rest} seconds</span>\n        )}\n      </Show>\n\n      <Show condition={restFinished}>\n        <div className='has-text-success'>\n          Get ready for the next segment!\n        </div>\n       </Show>\n    </>\n  );\n};\n\nexport default SegmentRest;\n","import React, { useEffect, useState } from 'react';\nimport Show from '../../Components/Show';\nimport { useAuthState } from '../../Context';\nimport SegmentActions from './SegmentActions';\nimport SegmentDataTable from './SegmentDataTable';\nimport SegmentRest from './SegmentRest';\n\nconst Segment = ({ segment, segmentsLength, showStopwatch, toggleStopwatch, segmentData, index, workoutStarted, segmentIdentifier }) => {\n  const [showRestTimer, toggleRestTimer] = useState(false);\n  const [restFinished, toggleRestFinished] = useState(false);\n  const { email } = useAuthState();\n\n  useEffect(() => {\n    // When the identifier changes, don't show the rest timer\n    toggleRestTimer(false);\n    toggleRestFinished(false);\n  }, [segmentIdentifier]);\n\n  if (!segment) return null;\n\n  const startClick = () => {\n    toggleStopwatch(!showStopwatch);\n  };\n  const onFinishCallback = (time) => {\n    toggleStopwatch(false, time);\n    toggleRestTimer(true);\n  };\n\n  const onRestFinish = () => {\n    toggleRestTimer(false);\n    toggleRestFinished(true);\n  };\n\n  const myResultsIn = !!segmentData[email];\n\n  return (\n    <div className='mt-2'>\n      <div className='card'>\n        <div className='segment-position'>\n          {index + 1 } / {segmentsLength}\n        </div>\n\n        <div className='card-content pt-1'>\n          <div className='content'>\n            <div className='columns mt-1 is-flex'>\n              <div className='column is-half'>\n                <b className='is-size-5'>{segment.display_length} Goal</b>\n                <br/>\n                {segment.time_goal} seconds\n              </div>\n\n              <div className='column is-half'>\n                <SegmentRest rest={segment.rest} showRestTimer={showRestTimer} onRestFinish={onRestFinish} restFinished={restFinished} />\n              </div>\n            </div>\n\n            <Show condition={!myResultsIn}>\n              <SegmentActions\n                showStopwatch={showStopwatch}\n                startClick={startClick}\n                onFinishCallback={onFinishCallback}\n                workoutStarted={workoutStarted}\n              />\n            </Show>\n\n            <SegmentDataTable segmentData={segmentData} timeGoal={segment.time_goal} />\n\n            <hr />\n\n            <p>\n              {segment.description}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Segment;\n","import React from 'react';\nimport Segment from './Segment';\n\nconst LiveSegmentView = ({ segments, segmentsLength, segmentIdentifier, segmentData, showStopwatch, toggleStopwatch }) => {\n  if (!segmentsLength) return null;\n\n  const activeSegment = segments.find(s => s.identifier === segmentIdentifier);\n  const index = segments.findIndex(s => s.identifier === segmentIdentifier);\n\n  return (\n    <Segment\n      index={index}\n      segment={activeSegment}\n      segmentsLength={segmentsLength}\n      segmentIdentifier={segmentIdentifier}\n      workoutStarted={true}\n      segmentData={segmentData}\n      showStopwatch={showStopwatch}\n      toggleStopwatch={toggleStopwatch}\n    />\n  );\n}\n\nexport default LiveSegmentView;\n","import React from 'react';\n\nconst StaticSegment = ({ segment }) => (\n  <div className='column is-one-third'>\n    <div className='card'>\n      <div className='card-content pt-1'>\n        <div className='content'>\n          <div className='columns mt-1 is-flex'>\n            <div className='column is-half'>\n              <b className='is-size-5'>{segment.display_length} Goal</b>\n              <br/>\n              {segment.time_goal} seconds\n            </div>\n\n            <div className='column is-half'>\n              <b className='is-size-5'>Rest</b>\n              <br/>\n              {segment.rest} seconds\n            </div>\n          </div>\n\n          <hr />\n\n          <p>\n            {segment.description}\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default StaticSegment;\n","import React from 'react';\nimport Show from '../../Components/Show';\nimport { useAuthState } from '../../Context';\nimport LiveSegmentView from './LiveSegmentView';\nimport StaticSegment from './StaticSegment';\n\nconst Segments = ({ selectedWorkout, segmentIdentifier, segmentData, showStopwatch, toggleStopwatch, ...props }) => {\n  const { email } = useAuthState();\n  if (!selectedWorkout.segments.length) {\n    return (\n      <p className='mb-3'>\n        Workout cannot start. No segments added yet :(\n      </p>\n    );\n  }\n\n  const segments = selectedWorkout.segments;\n  const segmentsLength = segments.length;\n  const myResultsIn = !!segmentData[email];\n  const allResultsIn = Object.keys(segmentData).length === Object.keys(props.members).length;\n\n  if (segmentIdentifier) {\n    return (\n      <>\n        <Show condition={myResultsIn && allResultsIn}>\n          <div className='button is-primary mt-2 mb-1' tabIndex={0} onClick={props.onNextClick}>\n            Next Segment\n          </div>\n        </Show>\n\n        <LiveSegmentView\n          segments={segments}\n          segmentsLength={segmentsLength}\n          segmentIdentifier={segmentIdentifier}\n          segmentData={segmentData}\n          showStopwatch={showStopwatch}\n          toggleStopwatch={toggleStopwatch}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className='is-size-3 mb-5'>\n        {segmentsLength} Total {segmentsLength === 1 ? 'Segment' : 'Segments'}\n      </div>\n\n      <div className='segments columns'>\n        {segments.map((segment) => (\n          <StaticSegment\n            key={segment.identifier}\n            segment={segment}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Segments;\n","import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport LockScreen from './LockScreen';\nimport FullScreen from './FullScreen';\nimport ChatBubble from './ChatBubble';\nimport Segments from './Segments';\nimport ChatMembers from './ChatMembers';\nimport Show from '../../Components/Show';\n\nclass WorkoutDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatHistory: [],\n      unreadMessage: false,\n      members: [],\n      showChat: false,\n      showStopwatch: false\n    };\n\n    // Enable pusher logging - not enabled in any environment except local\n    Pusher.logToConsole = process.env.NODE_ENV === 'development';\n\n    this.pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY, {\n      cluster: process.env.REACT_APP_PUSHER_CLUSTER,\n      authEndpoint: `${process.env.REACT_APP_ROOT_URL}/pusher/auth`,\n      auth: {\n        headers: { 'Authorization': localStorage.getItem('currentUserToken') || '' }\n      }\n    });\n\n    this.channel = this.pusher.subscribe(`presence-workoutChannel-${this.identifier}`);\n  }\n\n  get identifier() {\n    const { identifier } = this.props.selectedWorkout;\n    return identifier;\n  }\n\n  componentDidMount() {\n    this.channel.bind('pusher:subscription_succeeded', function(info) {\n      this.setState({ members: info.members, showChat: true });\n    }, this);\n\n    this.channel.bind('pusher:member_added', function(member) {\n      const newMembers = {\n        ...this.state.members,\n        [member.id]: member.info\n      }\n      this.setState({ members: newMembers });\n    }, this);\n\n    this.channel.bind('pusher:member_removed', function(member) {\n      const newMembers = Object.keys(this.state.members)\n        .filter(key => `${key}` !== `${member.id}`)\n        .reduce((obj, key) => {\n          obj[key] = this.state.members[key];\n          return obj;\n        }, {});\n\n      this.setState({ members: newMembers });\n    }, this);\n\n    this.channel.bind('client-chat-message', (data) => {\n      this.setState({\n        chatHistory: [\n          ...this.state.chatHistory,\n          {\n            ...data\n          }\n        ],\n        unreadMessage: true\n      });\n    }, this);\n\n    this.channel.bind('client-workout-started', (data) => {\n      this.props.mirrorWorkout(data);\n    }, this);\n\n    this.channel.bind('client-segment-started', (_data) => {\n      // Event from another user starting a segment\n      this.setState({ showStopwatch: true });\n    }, this);\n\n    this.channel.bind('client-segment-finished', (segmentData) => {\n      // Event from another user finishing a segment\n      this.props.mirrorSegmentData(segmentData);\n    }, this);\n\n    this.channel.bind('client-segment-next', (_data) => {\n      // Event from another user going to the next segment\n      this.props.mirrorNextSegment();\n    }, this);\n  }\n\n  componentWillUnmount() {\n    this.pusher.unsubscribe(`presence-workoutChannel-${this.identifier}`);\n\n    if (this.channel) {\n      this.channel.unbind();\n    }\n\n    this.pusher.disconnect();\n\n    document.body.classList.remove('not-vertically-scrollable');\n  }\n\n  setChatHistory = (history) => {\n    this.setState({ chatHistory: history });\n  }\n\n  setUnreadStatus = (status) => {\n    this.setState({ unreadMessage: status });\n  }\n\n  get showStartWorkoutButton() {\n    if (this.props.workoutStarted) return false;\n\n    return !!this.props.selectedWorkout.segments.length;\n  }\n\n  startWorkoutWrapper = () => {\n    this.props.startWorkout(this.channel);\n  }\n\n  toggleStopwatch = (value, finishTime = null) => {\n    if (value) {\n      this.channel.trigger('client-segment-started', {});\n    } else {\n      const segment = this.props.selectedWorkout.segments.find(s => s.identifier === this.props.segmentIdentifier);\n      const segmentData = { email: this.props.email, results: {\n        finishTime,\n        timeGoal: segment.time_goal,\n        displayLength: segment.display_length\n      }};\n      this.channel.trigger('client-segment-finished', segmentData);\n      this.props.mirrorSegmentData(segmentData);\n    }\n\n    this.setState({ showStopwatch: value });\n  }\n\n  onNextClick = () => {\n    this.props.mirrorNextSegment();\n    this.channel.trigger('client-segment-next', {});\n  }\n\n  render() {\n    return (\n      <>\n        <div className='buttons'>\n          <Show condition={this.showStartWorkoutButton}>\n            <div tabIndex={0} className='button is-primary' onClick={this.startWorkoutWrapper}>\n              Start Workout\n            </div>\n          </Show>\n\n          <LockScreen />\n          <FullScreen />\n        </div>\n\n        <Show condition={Object.values(this.state.members).length > 1}>\n          <ChatBubble\n            channel={this.channel}\n            setChatHistory={this.setChatHistory}\n            setUnreadStatus={this.setUnreadStatus}\n            {...this.state}\n          />\n          <ChatMembers members={this.state.members} />\n        </Show>\n\n        <Segments\n          selectedWorkout={this.props.selectedWorkout}\n          segmentIdentifier={this.props.segmentIdentifier}\n          segmentData={this.props.segmentData}\n          showStopwatch={this.state.showStopwatch}\n          toggleStopwatch={this.toggleStopwatch}\n          members={this.state.members}\n          onNextClick={this.onNextClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default WorkoutDetail;\n","import React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Loader from '../../Components/Loader';\nimport Show from '../../Components/Show';\nimport { generateUUID } from '../../Config/utils';\nimport { useAuthDispatch, useAuthState } from '../../Context';\nimport { getWorkout } from '../../Context/actions';\nimport PreviousSessions from './PreviousSessions';\nimport { getRelevantSegmentData, saveRelevantSegmentData } from './SegmentUtils';\nimport WorkoutDetail from './WorkoutDetail';\n\nconst Workout = ({ match }) => {\n  const { params: { identifier } } = match;\n  const { selectedWorkout, error, loading, email } = useAuthState();\n  const dispatch = useAuthDispatch();\n  const [activeTab, setActiveTab] = useState('current');\n\n  const sessionFromLS = localStorage.getItem('liveSessionIdentifier') || null;\n  const identifierFromLS = localStorage.getItem('liveWorkoutIdentifier') || null;\n  const workoutStartedInitial = !!sessionFromLS && identifier === identifierFromLS;\n\n  const [workoutStarted, setWorkoutStatus] = useState(workoutStartedInitial);\n  const sessionIdenitiferInitial = workoutStartedInitial ? sessionFromLS : null;\n  const [liveSessionIdentifier, setSessionIdentifier] = useState(sessionIdenitiferInitial);\n\n  const segmentIdentifierFromLS = localStorage.getItem('liveSegmentIdentifier') || null;\n  const [segmentIdentifier, setSegmentIdentifier] = useState(segmentIdentifierFromLS);\n\n  const defaultSegmentData = getRelevantSegmentData(identifier, liveSessionIdentifier, segmentIdentifier);\n  const [segmentData, setSegmentData] = useState(defaultSegmentData);\n\n  const setWorkoutData = (uuid, newIdentifier, newSegmentIdentifier, workoutStatus = true) => {\n    localStorage.setItem('liveSessionIdentifier', uuid);\n    localStorage.setItem('liveWorkoutIdentifier', newIdentifier);\n    localStorage.setItem('liveSegmentIdentifier', newSegmentIdentifier);\n\n    setWorkoutStatus(workoutStatus);\n    setSessionIdentifier(uuid);\n    setSegmentIdentifier(newSegmentIdentifier);\n    setSegmentData({});\n  };\n\n  const startWorkout = (channel = null) => {\n    const uuid = generateUUID();\n    const currentSegmentIdentifier = selectedWorkout.segments[0].identifier;\n    setWorkoutData(uuid, identifier, currentSegmentIdentifier);\n\n    if (channel) {\n      channel.trigger('client-workout-started', { uuid, identifier, currentSegmentIdentifier });\n    }\n  };\n\n  const mirrorNextSegment = () => {\n    const currentIndex = selectedWorkout.segments.findIndex(s => s.identifier === segmentIdentifier);\n    let newSegmentIdentifier;\n    if ((currentIndex + 1) >= selectedWorkout.segments.length) {\n      newSegmentIdentifier = null;\n    } else {\n      newSegmentIdentifier = selectedWorkout.segments[currentIndex + 1].identifier;\n    }\n\n    localStorage.setItem('liveSegmentIdentifier', newSegmentIdentifier);\n    saveRelevantSegmentData(identifier, liveSessionIdentifier, segmentIdentifier, segmentData);\n    setSegmentIdentifier(newSegmentIdentifier);\n    setSegmentData({});\n    if (newSegmentIdentifier === null) {\n      setWorkoutData(null, null, null, false);\n      setActiveTab('previous');\n    }\n  }\n\n  const mirrorSegmentData = (data) => {\n    setSegmentData({\n      ...segmentData,\n      [data.email]: data.results\n    });\n  }\n\n  const mirrorWorkout = (data) => {\n    setWorkoutData(data.uuid, data.identifier, data.currentSegmentIdentifier);\n  };\n\n  useEffect(() => {\n    getWorkout(identifier, dispatch);\n  }, [identifier, dispatch]);\n\n  if (loading) {\n    return <Loader spaceTop='mt-5' />;\n  } else if (!selectedWorkout || !Object.keys(selectedWorkout).length) {\n    return (\n      <div className='has-text-centered'>\n        <h1 className='is-size-3'>{error}</h1>\n        <NavLink to='/workouts' className='button mt-3'>Return to My Workouts</NavLink>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className='pattern-cross-dots-xl is-flex is-align-items-center is-justify-content-center neg-ml-5 neg-mr-5 border-bottom-primary-1 is-flex-direction-column'>\n        <div className='tag is-medium mt-2 mb-2'>\n          {selectedWorkout.name}\n        </div>\n        <Show condition={workoutStarted}>\n          <div className='tag is-small is-primary mb-2' key={liveSessionIdentifier}>\n            Active\n          </div>\n        </Show>\n      </div>\n\n      <Show condition={!workoutStarted}>\n        <div className='tabs is-medium'>\n          <ul>\n            <li className={activeTab === 'current' ? 'is-active' : undefined}>\n              {/* eslint-disable-next-line */}\n              <a className='tab' onClick={() => setActiveTab('current')}>\n                Current\n              </a>\n            </li>\n\n            <li className={activeTab === 'previous' ? 'is-active' : undefined}>\n              {/* eslint-disable-next-line */}\n              <a className='tab' onClick={() => setActiveTab('previous')}>\n                Previous Sessions\n              </a>\n            </li>\n          </ul>\n        </div>\n      </Show>\n\n      <div className='ml-5 mr-5 mt-2'>\n        {activeTab === 'current' && (\n          <WorkoutDetail\n            selectedWorkout={selectedWorkout}\n            workoutStarted={workoutStarted}\n            startWorkout={startWorkout}\n            mirrorWorkout={mirrorWorkout}\n            segmentIdentifier={segmentIdentifier}\n            segmentData={segmentData}\n            mirrorSegmentData={mirrorSegmentData}\n            mirrorNextSegment={mirrorNextSegment}\n            email={email}\n          />\n        )}\n\n        {activeTab === 'previous' && <PreviousSessions selectedWorkout={selectedWorkout} setActiveTab={setActiveTab} />}\n      </div>\n    </>\n  );\n}\n\nexport default Workout;\n"],"sourceRoot":""}