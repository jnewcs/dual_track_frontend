{"version":3,"sources":["Components/Show.jsx","Config/utils.js","Pages/Workout/PreviousSessions.jsx","Pages/Workout/LockScreen.jsx","Pages/Workout/FullScreen.jsx","Pages/Workout/ChatMembers.jsx","Pages/Workout/ChatInterface.jsx","Pages/Workout/ChatBubble.jsx","Components/Stopwatch.jsx","Pages/Workout/SegmentActions.jsx","Pages/Workout/SegmentDataTable.jsx","Components/Countdown.jsx","Pages/Workout/SegmentRest.jsx","Pages/Workout/Segment.jsx","Pages/Workout/LiveSegmentView.jsx","Pages/Workout/StaticSegment.jsx","Pages/Workout/Segments.jsx","Pages/Workout/WorkoutDetail.jsx","Pages/Workout/index.jsx"],"names":["Show","condition","children","timeToString","time","diffInHrs","diffInMin","Math","floor","mm","diffInSec","ss","diffInMs","ms","formattedMM","toString","padStart","formattedSS","formattedMS","generateUUID","uuidv4","PreviousSessions","selectedWorkout","setActiveTab","identifier","email","useAuthState","previousSessions","getPreviousWorkoutData","Object","keys","length","className","tabIndex","onClick","removeWorkoutHistory","map","sessionIdentifier","index","segmentData","segmentIdentifier","results","displayLength","timeGoal","grabSegmentNotificationClass","finishTime","LockScreen","useState","screenLock","setScreenLock","locked","setLockedStatus","navigator","requestWakeLock","a","wakeLock","request","lock","console","error","name","message","releaseWakeLock","release","onKeyUp","e","key","FullScreen","document","fullscreenElement","inFullScreen","setScreenStatus","enterFullScreen","documentElement","requestFullscreen","leaveFullScreen","exitFullscreen","ChatMembers","members","count","values","member","tagType","ChatInterface","open","chatHistory","closeChat","setMessage","sendMessage","dangerouslySetInnerHTML","__html","chat","sender","id","type","placeholder","value","onChange","target","disabled","ChatBubble","showChat","channel","setChatHistory","unreadMessage","setUnreadStatus","setOpenStatus","useEffect","lastElement","getElementById","scrollIntoView","escFunction","keyCode","openChat","addEventListener","removeEventListener","body","classList","remove","add","fill","color","formattedMessage","timestamp","Date","now","trigger","StopWatch","showFinish","onPlayCallback","onStopCallback","onFinishCallback","playing","setPlaying","startTime","setTime","elapsedTime","setElapsedTime","timerInterval","setTimerInterval","handleMainAction","clearInterval","interval","setInterval","handleFinish","alt","src","SegmentActions","workoutStarted","startClick","showStopwatch","SegmentDataTable","Countdown","state","minutesRemaining","secondsRemaining","goalInMS","getTime","props","amount","calculateMinutesRemaining","distance","tick","setState","calculateSecondsRemaining","onFinish","componentDidMount","componentWillUnmount","this","textColor","PureComponent","SegmentRest","restFinished","rest","showRestTimer","onRestFinish","Segment","segment","segmentsLength","toggleStopwatch","allResultsIn","toggleRestTimer","toggleRestFinished","myResultsIn","display_length","time_goal","description","LiveSegmentView","segments","activeSegment","find","s","findIndex","StaticSegment","Segments","onNextClick","isLastSegment","WorkoutDetail","history","status","startWorkoutWrapper","startWorkout","mirrorSegmentData","mirrorNextSegment","Pusher","logToConsole","process","pusher","cluster","authEndpoint","auth","headers","localStorage","getItem","subscribe","bind","info","newMembers","filter","reduce","obj","data","mirrorWorkout","_data","unsubscribe","unbind","disconnect","showStartWorkoutButton","Component","Workout","match","params","loading","dispatch","useAuthDispatch","activeTab","sessionFromLS","getFromLocalStorage","identifierFromLS","workoutStartedInitial","setWorkoutStatus","sessionIdenitiferInitial","liveSessionIdentifier","setSessionIdentifier","segmentIdentifierFromLS","setSegmentIdentifier","defaultSegmentData","getRelevantSegmentData","setSegmentData","setWorkoutData","uuid","newIdentifier","newSegmentIdentifier","workoutStatus","setItem","getWorkout","Loader","spaceTop","gradientClass","undefined","currentSegmentIdentifier","currentIndex","saveRelevantSegmentData","to"],"mappings":"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","file":"static/js/4.9dd859b2.chunk.js","sourcesContent":["const Show = ({ condition = true, children }) => {\n  if (!condition) return null;\n\n  return children;\n}\n\nexport default Show;\n","import { v4 as uuidv4 } from 'uuid';\n\n// SVG Icon Links\nexport const pauseButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/pause-button_pinhpy.svg';\nexport const playButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/play-button_opkxmt.svg';\nexport const resetButtonSrc = 'https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/reset-button_mdv6wf.svg';\n\n// Convert time to a format of hours, minutes, seconds, and milliseconds\nexport function timeToString(time) {\n  let diffInHrs = time / 3600000;\n  let hh = Math.floor(diffInHrs);\n\n  let diffInMin = (diffInHrs - hh) * 60;\n  let mm = Math.floor(diffInMin);\n\n  let diffInSec = (diffInMin - mm) * 60;\n  let ss = Math.floor(diffInSec);\n\n  let diffInMs = (diffInSec - ss) * 100;\n  let ms = Math.floor(diffInMs);\n\n  let formattedMM = mm.toString().padStart(2, \"0\");\n  let formattedSS = ss.toString().padStart(2, \"0\");\n  let formattedMS = ms.toString().padStart(2, \"0\");\n\n  return `${formattedMM}:${formattedSS}:${formattedMS}`;\n}\n\nexport function generateUUID() {\n  return uuidv4();\n}\n","import React from 'react';\nimport { timeToString } from '../../Config/utils';\nimport { useAuthState } from '../../Context';\nimport { getPreviousWorkoutData, grabSegmentNotificationClass, removeWorkoutHistory } from './SegmentUtils';\n\nconst PreviousSessions = ({ selectedWorkout, setActiveTab }) => {\n  const { identifier } = selectedWorkout;\n  const { email } = useAuthState();\n  const previousSessions = getPreviousWorkoutData(identifier);\n\n  if (!previousSessions || !Object.keys(previousSessions).length) {\n    return (\n      <div className='is-size-3 has-text-centered'>\n        You have not run this workout before\n      </div>\n    );\n  }\n\n  const clearHistory = () => {\n    removeWorkoutHistory(identifier);\n    setActiveTab('current');\n  };\n\n  return (\n    <>\n      <div className='button' tabIndex={0} onClick={clearHistory}>\n        Clear History\n      </div>\n\n      <div className='columns'>\n        {Object.keys(previousSessions).map((sessionIdentifier, index) => {\n          const segmentData = previousSessions[sessionIdentifier];\n\n          return (\n            <div className='column' key={sessionIdentifier}>\n              <div className='card mt-2'>\n                <div className='is-size-5 has-text-centered pt-2'>\n                  Session #{index + 1}\n                </div>\n\n                <hr className='mt-2 mb-2'/>\n\n                <div className='card-content pt-1'>\n                  <div className='content'>\n                    <table className='table is-bordered'>\n                      <thead>\n                        <tr>\n                          <th>Segment</th>\n                          <th>Goal</th>\n                          <th>Finish Time</th>\n                        </tr>\n                      </thead>\n\n                      <tbody>\n                        {Object.keys(segmentData).map(segmentIdentifier => {\n                          const results = segmentData[segmentIdentifier][email];\n\n                          return (\n                            <tr key={segmentIdentifier}>\n                              <td>{results.displayLength}</td>\n                              <td>{timeToString(results.timeGoal)}</td>\n                              <td className={`pb-1 pb-1 ${grabSegmentNotificationClass(results.finishTime, results.timeGoal)}`}>\n                                {timeToString(results.finishTime)}\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default PreviousSessions;\n","import React, { useState } from 'react';\n\nconst LockScreen = () => {\n  const [screenLock, setScreenLock] = useState(null);\n  const [locked, setLockedStatus] = useState(false);\n\n  if (!('wakeLock' in navigator)) {\n    // Screen Wake Lock API is not supported 🎉\n    // - Need to be running the server in HTTPS mode\n    return null;\n  }\n\n  // Function that attempts to request a screen wake lock.\n  const requestWakeLock = async () => {\n    try {\n      const lock = await navigator.wakeLock.request('screen');\n      setScreenLock(lock);\n      setLockedStatus(true);\n    } catch (err) {\n      console.error(`${err.name}, ${err.message}`);\n    }\n  };\n  const releaseWakeLock = () => {\n    if (screenLock) screenLock.release();\n\n    setScreenLock(null);\n    setLockedStatus(false);\n  };\n\n  return (\n    <>\n      {locked ? (\n        <div className='button' tabIndex='0' onClick={releaseWakeLock} onKeyUp={(e) => e.key === 'Enter' && releaseWakeLock()}>\n          Unlock Page\n        </div>\n      ) : (\n        <div className='button' tabIndex='0' onClick={requestWakeLock} onKeyUp={(e) => e.key === 'Enter' && requestWakeLock()}>\n          Lock Page\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default LockScreen;\n","import React, { useState } from 'react';\n\nconst FullScreen = () => {\n  const [inFullScreen, setScreenStatus] = useState(!!document.fullscreenElement);\n\n  const enterFullScreen = () => {\n    document.documentElement.requestFullscreen();\n    setScreenStatus(true);\n  };\n  const leaveFullScreen = () => {\n    document.exitFullscreen();\n    setScreenStatus(false);\n  };\n\n  return (\n    <>\n      {inFullScreen ? (\n        <div className='button' tabIndex='0' onClick={leaveFullScreen} onKeyUp={(e) => e.key === 'Enter' && leaveFullScreen()}>\n          Leave Full Screen\n        </div>\n      ) : (\n        <div className='button' tabIndex='0' onClick={enterFullScreen} onKeyUp={(e) => e.key === 'Enter' && enterFullScreen()}>\n          Enter Full Screen\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default FullScreen;\n","import React from 'react';\nimport { useAuthState } from '../../Context';\n\nconst ChatMembers = ({ members }) => {\n  const { email } = useAuthState();\n  if (!members || members.count < 2) return null;\n\n  return (\n    <div>\n      {Object.values(members).map(member => {\n        const tagType = member.email === email ? 'is-link' : 'is-light';\n        return (\n          <div key={member.email} className={`tag mr-1 mb-1 ${tagType}`}>{member.email}</div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ChatMembers;\n","import React from 'react';\nimport { useAuthState } from '../../Context';\nimport ChatMembers from './ChatMembers';\n\nconst ChatInterface = ({ open, members, chatHistory, closeChat, message, setMessage, sendMessage }) => {\n  const { email } = useAuthState();\n\n  if (!open || !members || Object.values(members).length < 2) {\n    return null;\n  }\n\n  return (\n    <div className='chat-interface box has-background-link-light p-5'>\n      <div\n        tabIndex={0}\n        className='delete is-clickable is-size-3 close-chat-interface'\n        onClick={closeChat}\n        onKeyUp={(e) => e.key === 'Enter' && closeChat()}\n        dangerouslySetInnerHTML={{ __html: '&#215;' }}\n      />\n\n      <ChatMembers members={members} />\n\n      <div className='chat-messages box mt-2 p-3'>\n        <div className='is-full-width is-flex is-justify-content-center mb-4'>\n          <div className='tag is-dark'>This is the beginning of your conversation history</div>\n        </div>\n\n        {chatHistory.map((chat, index) => {\n          if (chat.sender === email) {\n            return (\n              <div className='is-full-width is-flex is-justify-content-flex-end mb-2' key={`chat-me-${index}`}>\n                <div className='tag is-medium is-link from-me-message is-pulled-right'>{chat.message}</div>\n              </div>\n            );\n          }\n\n          return (\n            <div className='mb-2' key={`chat-others-${index}`}>\n              <div className='tag is-medium is-light to-me-message'>{chat.message}</div>\n            </div>\n          );\n        })}\n\n        <div id='last-chat-element'></div>\n      </div>\n\n      <div className='chat-send-box box mt-2 p-3 mb-2'>\n        <div className='is-flex'>\n          <input\n            className='input is-normal'\n            type='text'\n            placeholder='Enter your message'\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            onKeyUp={(e) => e.key === 'Enter' && sendMessage()}\n          />\n\n          <div className='button is-primary ml-2' tabIndex={0} onClick={sendMessage} disabled={!message || !message.length}>\n            Send\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n","import React, { useState, useEffect } from 'react';\nimport { MessageCircle } from 'react-feather';\nimport { useAuthState } from '../../Context';\nimport ChatInterface from './ChatInterface';\n\nconst ChatBubble = ({ showChat, channel, chatHistory, setChatHistory, unreadMessage, setUnreadStatus, members }) => {\n  const [open, setOpenStatus] = useState(false);\n  const [message, setMessage] = useState('');\n  const { email } = useAuthState();\n\n  useEffect(() => {\n    const lastElement = document.getElementById('last-chat-element');\n    if (lastElement) {\n      lastElement.scrollIntoView();\n    }\n  }, [chatHistory, open]);\n\n  useEffect(() => {\n    const escFunction = (e) => {\n      if (e.keyCode !== 27) return;\n\n      openChat(false);\n    };\n\n    if (open) {\n      document.addEventListener('keydown', escFunction, false);\n    } else {\n      document.removeEventListener('keydown', escFunction, false);\n    }\n  }, [open]);  // eslint-disable-line\n\n  if (!channel || !showChat) return null;\n\n  const openChat = () => {\n    if (open) {\n      document.body.classList.remove('not-vertically-scrollable');\n    } else {\n      setUnreadStatus(false);\n      document.body.classList.add('not-vertically-scrollable');\n    }\n\n    setOpenStatus(!open);\n  };\n\n  const closeChat = () => { openChat(false) };\n\n  const sendMessage = () => {\n    if (!message || !message.length) return;\n\n    const formattedMessage = {\n      id: chatHistory.length + 1,\n      sender: email,\n      message,\n      timestamp: Date.now()\n    };\n\n    // Send message to others in the channel\n    channel.trigger('client-chat-message', formattedMessage);\n    setChatHistory([ ...chatHistory, formattedMessage ]);\n\n    setMessage('');\n  };\n\n  return (\n    <>\n      <button\n        className='button'\n        tabIndex={0}\n        onClick={openChat}\n        disabled={Object.values(members).length < 2}\n        onKeyUp={(e) => e.key === 'Enter' && openChat()}\n      >\n        <MessageCircle fill={unreadMessage ? '#00BAF0' : 'white'} color='black' />\n      </button>\n\n      <ChatInterface\n        open={open}\n        members={members}\n        chatHistory={chatHistory}\n        closeChat={closeChat}\n        message={message}\n        setMessage={setMessage}\n        sendMessage={sendMessage}\n      />\n    </>\n  );\n};\n\nexport default ChatBubble;\n","import React, { useEffect, useState } from 'react';\nimport { pauseButtonSrc, playButtonSrc, timeToString } from '../Config/utils';\n\nconst StopWatch = ({ showFinish = true, onPlayCallback = () => {}, onStopCallback = () => {}, onFinishCallback = () => {} }) => {\n  const [playing, setPlaying ] = useState(false);\n  const [startTime, setTime ] = useState(null);\n  const [elapsedTime, setElapsedTime ] = useState(0);\n  const [timerInterval, setTimerInterval ] = useState(null);\n\n  const handleMainAction = () => {\n    if (!playing) {\n      setTime(Date.now() - elapsedTime);\n      onPlayCallback();\n    } else {\n      clearInterval(timerInterval);\n      onStopCallback();\n    }\n\n    setPlaying(!playing);\n  };\n\n  useEffect(() => {\n    // On mount, we want to start the timer\n    handleMainAction();\n  }, []); // eslint-disable-line\n\n  useEffect(() => {\n    // With react hooks, we can't set a callback after\n    // calling setState on a state variable. To get around this,\n    // we setup an effect that triggers when startTime is changed\n    if (startTime === null) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n      setElapsedTime(0);\n    } else {\n      const interval = setInterval(function(){\n        if (startTime === null) {\n          setElapsedTime(0);\n        } else {\n          setElapsedTime(Date.now() - startTime);\n        }\n      }, 10);\n      setTimerInterval(interval);\n    }\n  }, [startTime]); // eslint-disable-line\n\n  const handleFinish = () => {\n    if (playing) {\n      handleMainAction();\n      onFinishCallback(elapsedTime);\n    }\n  };\n\n  return (\n    <div className='has-text-centered is-flex is-flex-direction-column is-align-items-center'>\n      <div className='stopwatch-circle circle is-flex is-justify-content-center is-align-items-center'>\n        <span className='time is-size-4' id='display'>\n          {elapsedTime ? timeToString(elapsedTime) : '00:00:00'}\n        </span>\n      </div>\n\n      <div className='mt-3 is-flex is-justify-content-space-between is-align-items-center'>\n        <img\n          className='is-clickable'\n          tabIndex={0}\n          id='main-action-button'\n          alt={playing ? 'pause stopwatch' : 'start stopwatch'}\n          src={playing ? pauseButtonSrc : playButtonSrc}\n          onClick={handleMainAction}\n          onKeyUp={(e) => e.key === 'Enter' && handleMainAction()}\n        />\n\n        {showFinish && playing && (\n          <div\n            className='button ml-5 is-medium'\n            tabIndex={0}\n            id='reset-button'\n            onClick={handleFinish}\n            onKeyUp={(e) => e.key === 'Enter' && handleFinish()}\n          >\n            Finish\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default StopWatch;\n","import React from 'react';\nimport Show from '../../Components/Show';\nimport StopWatch from '../../Components/Stopwatch';\n\nconst SegmentActions = ({ workoutStarted, startClick, onFinishCallback, showStopwatch }) => {\n  if (!workoutStarted) return null;\n\n  return (\n    <>\n      {!showStopwatch && (\n        <div tabIndex={0} className='button is-primary is-medium' onClick={startClick}>\n          Start\n        </div>\n      )}\n\n      <Show condition={showStopwatch}>\n        <StopWatch onFinishCallback={onFinishCallback} />\n      </Show>\n    </>\n  );\n}\n\nexport default SegmentActions;\n","import React from 'react';\nimport { timeToString } from '../../Config/utils';\nimport { grabSegmentNotificationClass } from './SegmentUtils';\n\nconst SegmentDataTable = ({ segmentData, timeGoal }) => {\n  if (!Object.keys(segmentData).length) return null;\n\n  return (\n    <>\n      <table className='table is-bordered'>\n        <thead>\n          <tr>\n            <th>User</th>\n            <th>Finish Time</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {Object.keys(segmentData).map(email => {\n            const results = segmentData[email];\n\n            return (\n              <tr key={email}>\n                <td>{email}</td>\n                <td className={`pb-1 pb-1 ${grabSegmentNotificationClass(results.finishTime, results.timeGoal)}`}>\n                  {timeToString(results.finishTime)}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default SegmentDataTable;\n","import React, { PureComponent } from 'react';\n\nclass Countdown extends PureComponent {\n  state = {\n    minutesRemaining: 0,\n    secondsRemaining: 0,\n    goalInMS: new Date().getTime() + (this.props.amount * 1000)\n  };\n\n  calculateMinutesRemaining = () => {\n    // Get todays date and time\n    const now = new Date().getTime();\n    // Find the distance between now an the count down date\n    const distance = this.state.goalInMS - now;\n    return Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n  }\n\n  calculateSecondsRemaining() {\n    // Get todays date and time\n    const now = new Date().getTime();\n    // Find the distance between now an the count down date\n    const distance = this.state.goalInMS - now;\n    return Math.floor((distance % (1000 * 60)) / 1000);\n  }\n\n  tick = () => {\n    this.setState({\n      minutesRemaining: this.calculateMinutesRemaining(),\n      secondsRemaining: this.calculateSecondsRemaining()\n    }, () => {\n      if (this.state.secondsRemaining <= 0 && this.state.minutesRemaining <= 0) {\n        clearInterval(this.interval);\n\n        if (this.props.onFinish) {\n          this.props.onFinish();\n        }\n      }\n    });\n  }\n\n  componentDidMount = () => {\n    this.tick();\n    this.interval = setInterval(this.tick, 1000);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.interval);\n  }\n\n  get textColor() {\n    if (this.state.minutesRemaining === 0 && this.state.secondsRemaining < 30) {\n      return 'has-text-danger';\n    }\n\n    return '';\n  }\n\n  render() {\n    return (\n      <div className={this.textColor}>\n        {this.state.minutesRemaining}:{this.state.secondsRemaining} left\n      </div>\n    );\n  }\n}\n\nexport default Countdown;\n","import React from 'react';\nimport Countdown from '../../Components/Countdown';\nimport Show from '../../Components/Show';\n\nconst SegmentRest = ({ restFinished, rest, showRestTimer, onRestFinish }) => {\n  return (\n    <>\n      <b className='is-size-5'>Rest</b>\n\n      <br/>\n\n      <Show condition={!restFinished}>\n        {showRestTimer ? (\n          <Countdown amount={rest} onFinish={onRestFinish} />\n        ) : (\n          <span>{rest} seconds</span>\n        )}\n      </Show>\n\n      <Show condition={restFinished}>\n        <div className='has-text-success'>\n          Get ready for the next segment!\n        </div>\n       </Show>\n    </>\n  );\n};\n\nexport default SegmentRest;\n","import React, { useEffect, useState } from 'react';\nimport Show from '../../Components/Show';\nimport { useAuthState } from '../../Context';\nimport SegmentActions from './SegmentActions';\nimport SegmentDataTable from './SegmentDataTable';\nimport SegmentRest from './SegmentRest';\n\nconst Segment = ({ segment, segmentsLength, showStopwatch, toggleStopwatch, segmentData, index, workoutStarted, segmentIdentifier, allResultsIn }) => {\n  const [showRestTimer, toggleRestTimer] = useState(false);\n  const [restFinished, toggleRestFinished] = useState(false);\n  const { email } = useAuthState();\n\n  useEffect(() => {\n    // When the identifier changes, don't show the rest timer\n    toggleRestTimer(false);\n    toggleRestFinished(false);\n  }, [segmentIdentifier]);\n\n  if (!segment) return null;\n\n  const startClick = () => {\n    toggleStopwatch(!showStopwatch);\n  };\n  const onFinishCallback = (time) => {\n    toggleStopwatch(false, time);\n    toggleRestTimer(true);\n  };\n\n  const onRestFinish = () => {\n    toggleRestTimer(false);\n    toggleRestFinished(true);\n  };\n\n  const myResultsIn = !!segmentData[email];\n\n  return (\n    <div className='mt-2'>\n      <div className='card'>\n        <div className='segment-position'>\n          {index + 1 } / {segmentsLength}\n        </div>\n\n        <div className='card-content pt-1'>\n          <div className='content'>\n            <div className='columns mt-1 is-flex'>\n              <Show condition={!showRestTimer}>\n                <div className='column is-half'>\n                  <b className='is-size-5'>{segment.display_length} Goal</b>\n                  <br/>\n                  {segment.time_goal} seconds\n                </div>\n              </Show>\n\n              <div className='column is-half'>\n                <SegmentRest rest={segment.rest} showRestTimer={showRestTimer} onRestFinish={onRestFinish} restFinished={restFinished} />\n              </div>\n            </div>\n\n            <Show condition={!myResultsIn}>\n              <SegmentActions\n                showStopwatch={showStopwatch}\n                startClick={startClick}\n                onFinishCallback={onFinishCallback}\n                workoutStarted={workoutStarted}\n              />\n            </Show>\n\n            <SegmentDataTable segmentData={segmentData} timeGoal={segment.time_goal} />\n\n            <Show condition={!showRestTimer}>\n              <hr />\n              <p>\n                {segment.description}\n              </p>\n            </Show>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Segment;\n","import React from 'react';\nimport Segment from './Segment';\n\nconst LiveSegmentView = ({ segments, segmentsLength, segmentIdentifier, ...props }) => {\n  if (!segmentsLength) return null;\n\n  const activeSegment = segments.find(s => s.identifier === segmentIdentifier);\n  const index = segments.findIndex(s => s.identifier === segmentIdentifier);\n\n  return (\n    <Segment\n      index={index}\n      segment={activeSegment}\n      segmentsLength={segmentsLength}\n      segmentIdentifier={segmentIdentifier}\n      workoutStarted={true}\n      {...props}\n    />\n  );\n}\n\nexport default LiveSegmentView;\n","import React from 'react';\n\nconst StaticSegment = ({ segment }) => (\n  <div className='column is-one-third'>\n    <div className='card'>\n      <div className='card-content pt-1'>\n        <div className='content'>\n          <div className='columns mt-1 is-flex'>\n            <div className='column is-half'>\n              <b className='is-size-5'>{segment.display_length} Goal</b>\n              <br/>\n              {segment.time_goal} seconds\n            </div>\n\n            <div className='column is-half'>\n              <b className='is-size-5'>Rest</b>\n              <br/>\n              {segment.rest} seconds\n            </div>\n          </div>\n\n          <hr />\n\n          <p>\n            {segment.description}\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default StaticSegment;\n","import React from 'react';\nimport Show from '../../Components/Show';\nimport { useAuthState } from '../../Context';\nimport LiveSegmentView from './LiveSegmentView';\nimport { isLastSegment } from './SegmentUtils';\nimport StaticSegment from './StaticSegment';\n\nconst Segments = ({ selectedWorkout, segmentIdentifier, segmentData, showStopwatch, toggleStopwatch, ...props }) => {\n  const { email } = useAuthState();\n  if (!selectedWorkout.segments.length) {\n    return (\n      <p className='mb-3'>\n        Workout cannot start. No segments added yet :(\n      </p>\n    );\n  }\n\n  const segments = selectedWorkout.segments;\n  const segmentsLength = segments.length;\n  const myResultsIn = !!segmentData[email];\n  const numberOfParticipants = Object.keys(props.members).length;\n  let allResultsIn = false;\n  if (numberOfParticipants === 0) {\n    allResultsIn = myResultsIn;\n  } else {\n    allResultsIn = Object.keys(segmentData).length === Object.keys(props.members).length;\n  }\n\n  if (segmentIdentifier) {\n    return (\n      <>\n        <Show condition={myResultsIn && allResultsIn}>\n          <div className='button is-primary mt-2 mb-1' tabIndex={0} onClick={props.onNextClick}>\n            {isLastSegment(segmentIdentifier, segments) ? 'Conclude Workout' : 'Next Segment'}\n          </div>\n        </Show>\n\n        <LiveSegmentView\n          segments={segments}\n          segmentsLength={segmentsLength}\n          segmentIdentifier={segmentIdentifier}\n          segmentData={segmentData}\n          showStopwatch={showStopwatch}\n          toggleStopwatch={toggleStopwatch}\n          allResultsIn={allResultsIn}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <div className='is-size-3 mb-5'>\n        {segmentsLength} Total {segmentsLength === 1 ? 'Segment' : 'Segments'}\n      </div>\n\n      <div className='segments columns'>\n        {segments.map((segment) => (\n          <StaticSegment\n            key={segment.identifier}\n            segment={segment}\n          />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport default Segments;\n","import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport LockScreen from './LockScreen';\nimport FullScreen from './FullScreen';\nimport ChatBubble from './ChatBubble';\nimport Segments from './Segments';\nimport Show from '../../Components/Show';\n\nclass WorkoutDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatHistory: [],\n      unreadMessage: false,\n      members: [],\n      showChat: false,\n      showStopwatch: false\n    };\n\n    // Enable pusher logging - not enabled in any environment except local\n    Pusher.logToConsole = process.env.NODE_ENV === 'development';\n\n    this.pusher = new Pusher(process.env.REACT_APP_PUSHER_KEY, {\n      cluster: process.env.REACT_APP_PUSHER_CLUSTER,\n      authEndpoint: `${process.env.REACT_APP_ROOT_URL}/pusher/auth`,\n      auth: {\n        headers: { 'Authorization': localStorage.getItem('currentUserToken') || '' }\n      }\n    });\n\n    this.channel = this.pusher.subscribe(`presence-workoutChannel-${this.identifier}`);\n  }\n\n  get identifier() {\n    const { identifier } = this.props.selectedWorkout;\n    return identifier;\n  }\n\n  componentDidMount() {\n    this.channel.bind('pusher:subscription_succeeded', function(info) {\n      this.setState({ members: info.members, showChat: true });\n    }, this);\n\n    this.channel.bind('pusher:member_added', function(member) {\n      const newMembers = {\n        ...this.state.members,\n        [member.id]: member.info\n      }\n      this.setState({ members: newMembers });\n    }, this);\n\n    this.channel.bind('pusher:member_removed', function(member) {\n      const newMembers = Object.keys(this.state.members)\n        .filter(key => `${key}` !== `${member.id}`)\n        .reduce((obj, key) => {\n          obj[key] = this.state.members[key];\n          return obj;\n        }, {});\n\n      this.setState({ members: newMembers });\n    }, this);\n\n    this.channel.bind('client-chat-message', (data) => {\n      this.setState({\n        chatHistory: [\n          ...this.state.chatHistory,\n          {\n            ...data\n          }\n        ],\n        unreadMessage: true\n      });\n    }, this);\n\n    this.channel.bind('client-workout-started', (data) => {\n      this.props.mirrorWorkout(data);\n    }, this);\n\n    this.channel.bind('client-segment-started', (_data) => {\n      // Event from another user starting a segment\n      this.setState({ showStopwatch: true });\n    }, this);\n\n    this.channel.bind('client-segment-finished', (segmentData) => {\n      // Event from another user finishing a segment\n      this.props.mirrorSegmentData(segmentData);\n    }, this);\n\n    this.channel.bind('client-segment-next', (_data) => {\n      // Event from another user going to the next segment\n      this.props.mirrorNextSegment();\n    }, this);\n  }\n\n  componentWillUnmount() {\n    this.pusher.unsubscribe(`presence-workoutChannel-${this.identifier}`);\n\n    if (this.channel) {\n      this.channel.unbind();\n    }\n\n    this.pusher.disconnect();\n\n    document.body.classList.remove('not-vertically-scrollable');\n  }\n\n  setChatHistory = (history) => {\n    this.setState({ chatHistory: history });\n  }\n\n  setUnreadStatus = (status) => {\n    this.setState({ unreadMessage: status });\n  }\n\n  get showStartWorkoutButton() {\n    if (this.props.workoutStarted) return false;\n\n    return !!this.props.selectedWorkout.segments.length;\n  }\n\n  startWorkoutWrapper = () => {\n    this.props.startWorkout(this.channel);\n  }\n\n  toggleStopwatch = (value, finishTime = null) => {\n    if (value) {\n      this.channel.trigger('client-segment-started', {});\n    } else {\n      const segment = this.props.selectedWorkout.segments.find(s => s.identifier === this.props.segmentIdentifier);\n      const segmentData = { email: this.props.email, results: {\n        finishTime,\n        timeGoal: segment.time_goal,\n        displayLength: segment.display_length\n      }};\n      this.channel.trigger('client-segment-finished', segmentData);\n      this.props.mirrorSegmentData(segmentData);\n    }\n\n    this.setState({ showStopwatch: value });\n  }\n\n  onNextClick = () => {\n    this.props.mirrorNextSegment();\n    this.channel.trigger('client-segment-next', {});\n  }\n\n  render() {\n    return (\n      <>\n        <div className='buttons'>\n          <Show condition={this.showStartWorkoutButton}>\n            <div tabIndex={0} className='button is-primary' onClick={this.startWorkoutWrapper}>\n              Start Workout\n            </div>\n          </Show>\n\n          <LockScreen />\n          <FullScreen />\n\n          <Show condition={Object.values(this.state.members).length > 1}>\n            <ChatBubble\n              channel={this.channel}\n              setChatHistory={this.setChatHistory}\n              setUnreadStatus={this.setUnreadStatus}\n              {...this.state}\n            />\n          </Show>\n        </div>\n\n        <Segments\n          selectedWorkout={this.props.selectedWorkout}\n          segmentIdentifier={this.props.segmentIdentifier}\n          segmentData={this.props.segmentData}\n          showStopwatch={this.state.showStopwatch}\n          toggleStopwatch={this.toggleStopwatch}\n          members={this.state.members}\n          onNextClick={this.onNextClick}\n        />\n      </>\n    );\n  }\n}\n\nexport default WorkoutDetail;\n","import React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Loader from '../../Components/Loader';\nimport Show from '../../Components/Show';\nimport { generateUUID } from '../../Config/utils';\nimport { useAuthDispatch, useAuthState } from '../../Context';\nimport { getWorkout } from '../../Context/actions';\nimport PreviousSessions from './PreviousSessions';\nimport { getFromLocalStorage, getRelevantSegmentData, saveRelevantSegmentData } from './SegmentUtils';\nimport WorkoutDetail from './WorkoutDetail';\n\nconst Workout = ({ match }) => {\n  const { params: { identifier } } = match;\n  const { selectedWorkout, error, loading, email } = useAuthState();\n  const dispatch = useAuthDispatch();\n  const [activeTab, setActiveTab] = useState('current');\n\n  const sessionFromLS = getFromLocalStorage('liveSessionIdentifier', 'string');\n  const identifierFromLS = getFromLocalStorage('liveWorkoutIdentifier', 'string');\n  const workoutStartedInitial = !!sessionFromLS && identifier === identifierFromLS;\n\n  const [workoutStarted, setWorkoutStatus] = useState(workoutStartedInitial);\n  const sessionIdenitiferInitial = workoutStartedInitial ? sessionFromLS : null;\n  const [liveSessionIdentifier, setSessionIdentifier] = useState(sessionIdenitiferInitial);\n\n  const segmentIdentifierFromLS = getFromLocalStorage('liveSegmentIdentifier', 'string');\n  const [segmentIdentifier, setSegmentIdentifier] = useState(segmentIdentifierFromLS);\n\n  const defaultSegmentData = getRelevantSegmentData(identifier, liveSessionIdentifier, segmentIdentifier);\n  const [segmentData, setSegmentData] = useState(defaultSegmentData);\n\n  const setWorkoutData = (uuid, newIdentifier, newSegmentIdentifier, workoutStatus = true) => {\n    localStorage.setItem('liveSessionIdentifier', uuid);\n    localStorage.setItem('liveWorkoutIdentifier', newIdentifier);\n    localStorage.setItem('liveSegmentIdentifier', newSegmentIdentifier);\n\n    setWorkoutStatus(workoutStatus);\n    setSessionIdentifier(uuid);\n    setSegmentIdentifier(newSegmentIdentifier);\n    setSegmentData({});\n  };\n\n  const startWorkout = (channel = null) => {\n    const uuid = generateUUID();\n    const currentSegmentIdentifier = selectedWorkout.segments[0].identifier;\n    setWorkoutData(uuid, identifier, currentSegmentIdentifier);\n\n    if (channel) {\n      channel.trigger('client-workout-started', { uuid, identifier, currentSegmentIdentifier });\n    }\n  };\n\n  const mirrorNextSegment = () => {\n    const currentIndex = selectedWorkout.segments.findIndex(s => s.identifier === segmentIdentifier);\n    let newSegmentIdentifier;\n    if ((currentIndex + 1) >= selectedWorkout.segments.length) {\n      newSegmentIdentifier = null;\n    } else {\n      newSegmentIdentifier = selectedWorkout.segments[currentIndex + 1].identifier;\n    }\n\n    localStorage.setItem('liveSegmentIdentifier', newSegmentIdentifier);\n    saveRelevantSegmentData(identifier, liveSessionIdentifier, segmentIdentifier, segmentData);\n    setSegmentIdentifier(newSegmentIdentifier);\n    setSegmentData({});\n    if (newSegmentIdentifier === null) {\n      setWorkoutData(null, null, null, false);\n      setActiveTab('previous');\n    }\n  }\n\n  const mirrorSegmentData = (data) => {\n    setSegmentData({\n      ...segmentData,\n      [data.email]: data.results\n    });\n  }\n\n  const mirrorWorkout = (data) => {\n    setWorkoutData(data.uuid, data.identifier, data.currentSegmentIdentifier);\n  };\n\n  useEffect(() => {\n    getWorkout(identifier, dispatch);\n  }, [identifier, dispatch]);\n\n  if (loading) {\n    return <Loader spaceTop='mt-5' />;\n  } else if (!selectedWorkout || !Object.keys(selectedWorkout).length) {\n    return (\n      <div className='has-text-centered'>\n        <h1 className='is-size-3'>{error}</h1>\n        <NavLink to='/workouts' className='button mt-3'>Return to My Workouts</NavLink>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className={`is-flex is-align-items-center ${selectedWorkout.gradientClass} is-justify-content-center border-bottom-primary-1 is-flex-direction-column`}>\n        <div className='tag is-medium mt-2 mb-2'>\n          {selectedWorkout.name}\n        </div>\n        <Show condition={workoutStarted}>\n          <div className='tag is-small is-primary mb-2' key={liveSessionIdentifier}>\n            Active\n          </div>\n        </Show>\n      </div>\n\n      <Show condition={!workoutStarted}>\n        <div className='tabs is-medium'>\n          <ul>\n            <li className={activeTab === 'current' ? 'is-active' : undefined}>\n              {/* eslint-disable-next-line */}\n              <a className='tab' onClick={() => setActiveTab('current')}>\n                Current\n              </a>\n            </li>\n\n            <li className={activeTab === 'previous' ? 'is-active' : undefined}>\n              {/* eslint-disable-next-line */}\n              <a className='tab' onClick={() => setActiveTab('previous')}>\n                Previous Sessions\n              </a>\n            </li>\n          </ul>\n        </div>\n      </Show>\n\n      <div className='ml-5 mr-5 mt-2'>\n        {activeTab === 'current' && (\n          <WorkoutDetail\n            selectedWorkout={selectedWorkout}\n            workoutStarted={workoutStarted}\n            startWorkout={startWorkout}\n            mirrorWorkout={mirrorWorkout}\n            segmentIdentifier={segmentIdentifier}\n            segmentData={segmentData}\n            mirrorSegmentData={mirrorSegmentData}\n            mirrorNextSegment={mirrorNextSegment}\n            email={email}\n          />\n        )}\n\n        {activeTab === 'previous' && <PreviousSessions selectedWorkout={selectedWorkout} setActiveTab={setActiveTab} />}\n      </div>\n    </>\n  );\n}\n\nexport default Workout;\n"],"sourceRoot":""}