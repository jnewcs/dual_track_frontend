{"version":3,"sources":["Context/actions.js","Context/reducer.js","Context/context.js","Components/Nav.jsx","Pages/Login.jsx","Config/routes.js","Pages/Dashboard.jsx","Pages/NotFound.jsx","Components/AppRoute.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ROOT_URL","sucessObject","success","failureObject","loginUser","dispatch","loginPayload","a","requestOptions","method","headers","body","JSON","stringify","type","fetch","response","json","data","email","token","get","payload","localStorage","setItem","error","message","getItem","removeItem","initialState","loading","errorMessage","AuthReducer","action","Error","AuthStateContext","createContext","AuthDispatchContext","useAuthState","context","useContext","undefined","useAuthDispatch","AuthProvider","children","useReducer","user","Provider","value","Nav","userDetails","className","role","aria-label","aria-expanded","data-target","aria-hidden","id","Boolean","to","activeClassName","Login","history","useState","setEmail","password","setPassword","handleLogin","e","preventDefault","push","console","log","htmlFor","disabled","onChange","target","onClick","routes","path","component","isPrivate","logout","checkAuth","AppRoute","Component","rest","render","props","pathname","App","installingWorker","map","route","index","exact","registerValidSW","swUrl","config","refreshing","navigator","serviceWorker","addEventListener","window","location","reload","register","then","registration","onupdatefound","installing","onstatechange","state","controller","notification","document","getElementById","classList","remove","onSuccess","catch","isLocalhost","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","URL","process","href","origin","postMessage","contentType","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4QAAMA,EAAW,mBACXC,EAAe,CAAEC,SAAS,GAC1BC,EAAgB,CAAED,SAAS,GAE1B,SAAeE,EAAtB,oC,4CAAO,WAAyBC,EAAUC,GAAnC,qBAAAC,EAAA,6DACCC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,oBAEZC,KAAMC,KAAKC,UAAUP,IAPlB,SAWHD,EAAS,CAAES,KAAM,kBAXd,SAYkBC,MAAM,GAAD,OAAIf,EAAJ,UAAsBQ,GAZ7C,cAYCQ,EAZD,gBAacA,EAASC,OAbvB,YAaCC,EAbD,QAgBMC,MAhBN,wBAmBGC,EAAQJ,EAASN,QAAQW,IAAI,iBAEjChB,EAAS,CAAES,KAAM,gBAAiBQ,QAAS,CAAEH,MAAOD,EAAKC,MAAOC,MAAOA,KACvEG,aAAaC,QAAQ,mBAAoBN,EAAKC,OAC9CI,aAAaC,QAAQ,mBAAoBJ,GAvBxC,kBAyBMnB,GAzBN,eA4BHI,EAAS,CAAES,KAAM,cAAeW,MAAOP,EAAKQ,UA5BzC,kBA6BIvB,GA7BJ,yCA+BHE,EAAS,CAAES,KAAM,cAAeW,MAAO,wCA/BpC,kBAgCItB,GAhCJ,2D,kEAoCA,WAAyBE,GAAzB,mBAAAE,EAAA,6DACCa,EAAQG,aAAaI,QAAQ,qBAAuB,GACpDnB,EAAiB,CACrBC,OAAQ,MACRC,QAAS,CACP,eAAgB,mBAChB,OAAU,mBACV,cAAiBU,IAPhB,SAYHf,EAAS,CAAES,KAAM,iBAZd,SAakBC,MAAM,GAAD,OAAIf,EAAJ,gBAA4BQ,GAbnD,cAaCQ,EAbD,gBAcGA,EAASC,OAdZ,oH,kEAoBA,WAAsBZ,GAAtB,SAAAE,EAAA,sDACLF,EAAS,CAAES,KAAM,WACjBS,aAAaK,WAAW,oBACxBL,aAAaK,WAAW,oBAHnB,4C,kCCzDMC,EAAe,CAC1BV,MAJUI,aAAaI,QAAQ,qBAAuB,GAKtDP,MAJUG,aAAaI,QAAQ,qBAAuB,GAKtDG,SAAS,EACTC,aAAc,MAGHC,EAAc,SAACH,EAAcI,GACxC,OAAQA,EAAOnB,MACb,IAAK,gBACL,IAAK,eACH,OAAO,2BACFe,GADL,IAEEC,SAAS,IAEb,IAAK,gBACH,OAAO,2BACFD,GADL,IAEEV,MAAOc,EAAOX,QAAQH,MACtBC,MAAOa,EAAOX,QAAQF,MACtBU,SAAS,EACTC,aAAc,OAElB,IAAK,SACH,OAAO,2BACFF,GADL,IAEEV,MAAO,GACPC,MAAO,GACPW,aAAc,OAGlB,IAAK,cACH,OAAO,2BACFF,GADL,IAEEC,SAAS,EACTC,aAAcE,EAAOR,QAGzB,QACE,MAAM,IAAIS,MAAJ,iCAAoCD,EAAOnB,S,OCvCjDqB,EAAmBC,0BACnBC,EAAsBD,0BAErB,SAASE,IACd,IAAMC,EAAUC,qBAAWL,GAC3B,QAAgBM,IAAZF,EACF,MAAM,IAAIL,MAAM,mDAGlB,OAAOK,EAGF,SAASG,IACd,IAAMH,EAAUC,qBAAWH,GAC3B,QAAgBI,IAAZF,EACF,MAAM,IAAIL,MAAM,sDAGlB,OAAOK,EAGF,IAAMI,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACnBC,qBAAWb,EAAaH,GADL,mBACrCiB,EADqC,KAC/BzC,EAD+B,KAG5C,OACE,cAAC8B,EAAiBY,SAAlB,CAA2BC,MAAOF,EAAlC,SACE,cAACT,EAAoBU,SAArB,CAA8BC,MAAO3C,EAArC,SACGuC,OCYMK,EAtCH,WACV,IAAMC,EAAcZ,IAEpB,OACE,sBAAKa,UAAU,kBAAkBC,KAAK,aAAaC,aAAW,kBAA9D,UACE,sBAAKF,UAAU,eAAf,UACE,qBAAKA,UAAU,iCAAf,uBAIA,sBAAKC,KAAK,SAASD,UAAU,gBAAgBE,aAAW,OAAOC,gBAAc,QAAQC,cAAY,cAAjG,UACE,sBAAMC,cAAY,SAClB,sBAAMA,cAAY,SAClB,sBAAMA,cAAY,eAItB,sBAAKC,GAAG,cAAcN,UAAU,cAAhC,UACE,qBAAKA,UAAU,eAAf,SACGO,QAAQR,EAAY/B,QACnB,mCACE,cAAC,IAAD,CAASwC,GAAG,aAAaR,UAAU,cAAcS,gBAAgB,YAAjE,2BAKN,qBAAKT,UAAU,aAAf,SACE,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,UAAf,SACE,cAAC,IAAD,CAASQ,GAAG,SAASR,UAAU,kBAAkBS,gBAAgB,YAAjE,gCCqCCC,EAnED,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACHC,mBAAS,IADN,mBACtB5C,EADsB,KACf6C,EADe,OAEGD,mBAAS,IAFZ,mBAEtBE,EAFsB,KAEZC,EAFY,KAIvB7D,EAAWqC,IACXyB,EAAW,uCAAG,WAAOC,GAAP,eAAA7D,EAAA,6DAClB6D,EAAEC,iBACE/C,EAAU,CACZwB,KAAM,CACJmB,WACA9C,UALc,kBAUKf,EAAUC,EAAUiB,GAVzB,iBAWFpB,QAXE,iDAahB4D,EAAQQ,KAAK,cAbG,kDAehBC,QAAQC,IAAR,MAfgB,0DAAH,sDALY,EAwBKlC,IAA1BR,EAxBqB,EAwBrBA,QAASC,EAxBY,EAwBZA,aAEjB,OACE,qBAAKoB,UAAU,sBAAf,SACE,sBAAKA,UAAU,iBAAf,UACGpB,GAAgB,mBAAGoB,UAAU,yBAAb,SAAuCpB,IAExD,iCACE,sBAAKoB,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQsB,QAAQ,QAAjC,mBACA,qBAAKtB,UAAU,UAAf,SACE,uBACEA,UAAU,QACVrC,KAAK,OACL2C,GAAG,QACHiB,SAAU5C,EACVkB,MAAO7B,EACPwD,SAAU,SAACP,GAAD,OAAOJ,EAASI,EAAEQ,OAAO5B,eAKzC,sBAAKG,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQsB,QAAQ,WAAjC,sBACA,qBAAKtB,UAAU,UAAf,SACE,uBACEA,UAAU,QACVrC,KAAK,WACL2C,GAAG,WACHiB,SAAU5C,EACVkB,MAAOiB,EACPU,SAAU,SAACP,GAAD,OAAOF,EAAYE,EAAEQ,OAAO5B,eAK9C,wBAAQG,UAAU,yBAAyB0B,QAASV,EAAaO,SAAU5C,EAA3E,4BCpCOgD,EAvBD,CACZ,CACEC,KAAK,IACLC,UAAWnB,EACXoB,WAAW,GAEb,CACEF,KAAK,SACLC,UAAWnB,EACXoB,WAAW,GAEb,CACEF,KAAK,aACLC,UCdc,SAAC,GAAiB,IAAflB,EAAc,EAAdA,QACbzD,EAAWqC,IACXQ,EAAcZ,IAOpB,OACE,gCACE,sBAAKa,UAAU,GAAf,UACE,2CAIA,wBAAQA,UAAU,GAAG0B,QAZN,YNqDhB,SAAP,2BMpDIK,CAAO7E,GACPyD,EAAQQ,KAAK,WAUT,oBAIA,wBAAQnB,UAAU,GAAG0B,QAAS,kBNiB/B,SAAP,kCMjB4CM,CAAU9E,IAA9C,2BAKF,+DAC+B6C,EAAY/B,MAD3C,WDVF8D,WAAW,GAEb,CACEF,KAAK,KACLC,UEpBa,WAChB,OACC,qBAAK7B,UAAU,GAAf,SACE,mDFkBA8B,WAAW,I,QGFAG,EAjBE,SAAC,GAAwD,IAA3CC,EAA0C,EAArDL,UAAsBD,EAA+B,EAA/BA,KAAME,EAAyB,EAAzBA,UAAcK,EAAW,gDACjEpC,EAAcZ,IACpB,OACE,cAAC,IAAD,aACEyC,KAAMA,EACNQ,OAAQ,SAAAC,GAAK,OACXP,IAAcvB,QAAQR,EAAY/B,OAChC,cAAC,IAAD,CAAUwC,GAAI,CAAE8B,SAAU,YAE1B,cAACJ,EAAD,eAAeG,MAGfF,KCYKI,IChBXC,EDgBWD,EApBf,WACE,OACE,sBAAKvC,UAAU,gBAAf,UACE,cAAC,EAAD,IAEA,qBAAKA,UAAU,+BAAf,SACE,cAAC,IAAD,UACG2B,EAAOc,KAAI,SAACC,EAAOC,GAAR,OACV,cAAC,EAAD,aACEC,OAAK,GAEDF,GADCC,cCqCnB,SAASE,EAAgBC,EAAOC,GAC9B,IAAIC,EAEJC,UAAUC,cAAcC,iBAAiB,oBAAoB,WACvDH,IACJI,OAAOC,SAASC,SAChBN,GAAa,MAGfC,UAAUC,cACPK,SAAST,GACTU,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAEH,OADxBlB,EAAmBiB,EAAaE,cAKhCnB,EAAiBoB,cAAgB,WAC/B,GAA+B,cAA3BpB,EAAiBqB,MACnB,GAAIZ,UAAUC,cAAcY,WAAY,CAGtC,IAAIC,EAAeC,SAASC,eAAe,oCACvCF,GACFA,EAAaG,UAAUC,OAAO,kBAMhC/C,QAAQC,IAAI,sCAGR0B,GAAUA,EAAOqB,WACnBrB,EAAOqB,UAAUX,SAO5BY,OAAM,SAAC/F,GACN8C,QAAQ9C,MAAM,4CAA6CA,MAQjE,IAAMgG,EAAc/D,QACW,cAA7B6C,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MAAM,2DC/GnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAAS7C,OACP,cAAC,IAAM8C,WAAP,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,cAAC,EAAD,UAINlB,SAASC,eAAe,SFFnB,SAAkBlB,GACvB,GAA6C,kBAAmBE,UAAW,CAGzE,GADkB,IAAIkC,IAAIC,uBAAwBhC,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOD,iBAAiB,QAAQ,WAE9Ba,SAASC,eAAe,8BAA8Bd,iBAAiB,SAAS,WACzEX,GAELA,EAAiB+C,YAAY,CAAEzG,OAAQ,mBAGzC,IAAMgE,EAAK,UAAMsC,uBAAN,sBAEPd,IA+EV,SAAiCxB,EAAOC,GAEtCnF,MAAMkF,EAAO,CACXvF,QAAS,CAAE,iBAAkB,YAE5BiG,MAAK,SAAC3F,GAEL,IAAM2H,EAAc3H,EAASN,QAAQW,IAAI,gBAEnB,MAApBL,EAAS4H,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMnC,MAAK,SAACC,GAClCA,EAAamC,aAAapC,MAAK,WAC7BJ,OAAOC,SAASC,eAKpBT,EAAgBC,EAAOC,MAG1BsB,OAAM,WACLjD,QAAQC,IAAI,oEArGVwE,CAAwB/C,EAAOC,GAI/BE,UAAUC,cAAcyC,MAAMnC,MAAK,WACjCpC,QAAQC,IACN,+GAMJwB,EAAgBC,EAAOC,OE3B/B+C,GAKArB,M","file":"static/js/main.f1cbe780.chunk.js","sourcesContent":["const ROOT_URL = '//127.0.0.1:4000';\nconst sucessObject = { success: true };\nconst failureObject = { success: false };\n\nexport async function loginUser(dispatch, loginPayload) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n    body: JSON.stringify(loginPayload),\n  };\n\n  try {\n    dispatch({ type: 'REQUEST_LOGIN' });\n    let response = await fetch(`${ROOT_URL}/login`, requestOptions);\n    let data = await response.json();\n\n    // If the email attribute is present, the login call was a success\n    if (data.email) {\n      // Using `Access-Control-Expose-Headers: 'Authorization'` response header,\n      // we are able to grab the Authorization token and save it in memory\n      var token = response.headers.get('Authorization');\n      debugger\n      dispatch({ type: 'LOGIN_SUCCESS', payload: { email: data.email, token: token } });\n      localStorage.setItem('currentUserEmail', data.email);\n      localStorage.setItem('currentUserToken', token);\n\n      return sucessObject;\n    }\n\n    dispatch({ type: 'LOGIN_ERROR', error: data.message });\n    return failureObject;\n  } catch (error) {\n    dispatch({ type: 'LOGIN_ERROR', error: 'Unhandled error while logging in :(' });\n    return failureObject;\n  }\n}\n\nexport async function checkAuth(dispatch) {\n  const token = localStorage.getItem('currentUserToken') || '';\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': token  // Stored in the format: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({ type: 'REQUEST_AUTH' });\n    let response = await fetch(`${ROOT_URL}/users/check`, requestOptions);\n    await response.json();\n  } catch (error) {\n    debugger\n  }\n}\n\nexport async function logout(dispatch) {\n  dispatch({ type: 'LOGOUT' });\n  localStorage.removeItem('currentUserEmail');\n  localStorage.removeItem('currentUserToken');\n}\n","let email = localStorage.getItem('currentUserEmail') || '';\nlet token = localStorage.getItem('currentUserToken') || '';\n\nexport const initialState = {\n  email: '' || email,\n  token: '' || token,\n  loading: false,\n  errorMessage: null\n};\n\nexport const AuthReducer = (initialState, action) => {\n  switch (action.type) {\n    case 'REQUEST_LOGIN':\n    case 'REQUEST_AUTH':\n      return {\n        ...initialState,\n        loading: true\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...initialState,\n        email: action.payload.email,\n        token: action.payload.token,\n        loading: false,\n        errorMessage: null\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        email: '',\n        token: '',\n        errorMessage: null\n      };\n\n    case 'LOGIN_ERROR':\n      return {\n        ...initialState,\n        loading: false,\n        errorMessage: action.error\n      };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { AuthReducer, initialState } from './reducer';\n\nconst AuthStateContext = createContext();\nconst AuthDispatchContext = createContext();\n\nexport function useAuthState() {\n  const context = useContext(AuthStateContext);\n  if (context === undefined) {\n    throw new Error('useAuthState must be used within a AuthProvider');\n  }\n\n  return context;\n}\n\nexport function useAuthDispatch() {\n  const context = useContext(AuthDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAuthDispatch must be used within a AuthProvider');\n  }\n\n  return context;\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, dispatch] = useReducer(AuthReducer, initialState);\n\n  return (\n    <AuthStateContext.Provider value={user}>\n      <AuthDispatchContext.Provider value={dispatch}>\n        {children}\n      </AuthDispatchContext.Provider>\n    </AuthStateContext.Provider>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useAuthState } from '../Context';\n\nconst Nav = () => {\n  const userDetails = useAuthState();\n\n  return (\n    <nav className='navbar is-light' role='navigation' aria-label='main navigation'>\n      <div className='navbar-brand'>\n        <div className='has-text-primary is-size-3 p-2'>\n          DualTrack\n        </div>\n\n        <div role='button' className='navbar-burger' aria-label='menu' aria-expanded='false' data-target='navbar-menu'>\n          <span aria-hidden='true'></span>\n          <span aria-hidden='true'></span>\n          <span aria-hidden='true'></span>\n        </div>\n      </div>\n\n      <div id='navbar-menu' className='navbar-menu'>\n        <div className='navbar-start'>\n          {Boolean(userDetails.email) && (\n            <>\n              <NavLink to='/dashboard' className='navbar-item' activeClassName='is-active'>Dashboard</NavLink>\n            </>\n          )}\n        </div>\n\n        <div className='navbar-end'>\n          <div className='navbar-item'>\n            <div className='buttons'>\n              <NavLink to='/login' className='button is-light' activeClassName='is-active'>Login</NavLink>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React, { useState } from 'react';\nimport { loginUser, useAuthDispatch, useAuthState } from '../Context';\n\nconst Login = ({ history }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useAuthDispatch();\n  const handleLogin = async (e) => {\n    e.preventDefault()\n    let payload = {\n      user: {\n        password,\n        email\n      }\n    };\n\n    try {\n      let response = await loginUser(dispatch, payload);\n      if (!response.success) return;\n\n      history.push('/dashboard');\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const { loading, errorMessage } = useAuthState();\n\n  return (\n    <div className='columns is-centered'>\n      <div className='column is-half'>\n        {errorMessage && <p className='notification is-danger'>{errorMessage}</p>}\n\n        <form>\n          <div className='field'>\n            <label className='label' htmlFor='email'>Email</label>\n            <div className='control'>\n              <input\n                className='input'\n                type='text'\n                id='email'\n                disabled={loading}\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className='field'>\n            <label className='label' htmlFor='password'>Password</label>\n            <div className='control'>\n              <input\n                className='input'\n                type='password'\n                id='password'\n                disabled={loading}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n\n        <button className='button is-primary mt-5' onClick={handleLogin} disabled={loading}>Login</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;","import Dashboard from '../Pages/Dashboard';\nimport Login from '../Pages/Login';\nimport NotFound from '../Pages/NotFound';\n\nconst routes =[\n  {\n    path:'/',\n    component: Login,\n    isPrivate: false\n  },\n  {\n    path:'/login',\n    component: Login,\n    isPrivate: false\n  },\n  {\n    path:'/dashboard',\n    component: Dashboard,\n    isPrivate: true\n  },\n  {\n    path:'/*',\n    component: NotFound,\n    isPrivate: false\n  },\n]\n \nexport default routes;\n","import React from 'react'\nimport { logout, checkAuth, useAuthDispatch, useAuthState } from '../Context';\n\nconst Dashboard = ({ history }) => {\n  const dispatch = useAuthDispatch();\n  const userDetails = useAuthState();\n\n  const handleLogout = () => {\n    logout(dispatch) //call the logout action\n    history.push('/login') //navigate to logout page on logout\n  };\n\n  return (\n    <div>\n      <div className='' >\n        <h1>\n          Dashboard\n        </h1>\n\n        <button className='' onClick={handleLogout}>\n          Logout\n        </button>\n\n        <button className='' onClick={() => checkAuth(dispatch)}>\n          Check Auth\n        </button>\n      </div>\n\n      <p>\n        {`Welcome to the dashboard ${userDetails.email}!`}\n      </p>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React from 'react';\n\nconst NotFound = () => {\n return (\n  <div className=''>\n    <h1>Page not found</h1>\n  </div>\n );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { useAuthState } from '../Context';\n\nconst AppRoute = ({ component: Component, path, isPrivate, ...rest }) => {\n  const userDetails = useAuthState();\n  return (\n    <Route\n      path={path}\n      render={props =>\n        isPrivate && !Boolean(userDetails.email) ? (\n          <Redirect to={{ pathname: '/login' }} />\n        ) : (\n          <Component {...props} />\n        )\n      }\n      {...rest}\n    />\n  )\n}\n\nexport default AppRoute;\n","import React from 'react';\nimport './App.sass';\nimport './Styles/General.css';\nimport { Switch } from 'react-router-dom';\nimport Nav from './Components/Nav';\nimport routes from './Config/routes.js';\nimport AppRoute from './Components/AppRoute';\n\nfunction App() {\n  return (\n    <div className='app-container'>\n      <Nav />\n\n      <div className='container is-widescreen pt-5'>\n        <Switch>\n          {routes.map((route, index) => (\n            <AppRoute\n              exact\n              key={index}\n              {...route}\n            />\n          ))}\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nlet installingWorker;\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      // Documentation: https://deanhume.com/displaying-a-new-version-available-progressive-web-app\n      document.getElementById('new-version-refresh-button').addEventListener('click', function() {\n        if (!installingWorker) return;\n\n        installingWorker.postMessage({ action: 'skipWaiting' });\n      });\n\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  let refreshing;\n  // The event listener that is fired when the service worker updates\n  navigator.serviceWorker.addEventListener('controllerchange', function () {\n    if (refreshing) return;\n    window.location.reload();\n    refreshing = true;\n  });\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, we know there is a new version ready so\n              // we show the notification to refresh the page to get it\n              let notification = document.getElementById('new-version-refresh-notification');\n              if (notification) {\n                notification.classList.remove('is-hidden');\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\n//////////////////\n// LOCAL ENV ONLY!\n//////////////////\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { AuthProvider } from './Context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}