{"version":3,"sources":["Context/actions.js","Context/reducer.js","Context/context.js","Components/Nav.jsx","Pages/Dashboard.jsx","Pages/Login.jsx","Pages/NotFound.jsx","Config/routes.js","Pages/Settings.jsx","Components/AppRoute.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["superagent","require","ROOT_PROD_URL","sucessObject","success","failureObject","loginUser","dispatch","loginPayload","type","post","send","set","end","err","res","console","log","email","body","token","headers","payload","localStorage","setItem","useHistory","push","error","message","a","getItem","requestOptions","method","fetch","response","json","removeItem","initialState","loading","errorMessage","AuthReducer","action","Error","AuthStateContext","createContext","AuthDispatchContext","useAuthState","context","useContext","undefined","useAuthDispatch","AuthProvider","children","useReducer","user","Provider","value","Nav","userDetails","className","role","aria-label","aria-expanded","data-target","aria-hidden","id","Boolean","to","activeClassName","Dashboard","history","onClick","logout","checkAuth","Login","useEffect","useState","localEmail","setEmail","password","setPassword","handleLogin","e","preventDefault","htmlFor","autoComplete","required","disabled","onChange","target","NotFound","routes","path","component","isPrivate","changelog","setChangelog","updateAvailable","setAvailable","addPwaUpdateListener","document","getElementById","dataset","then","finalChangelog","Object","keys","filter","item","satisfies","process","map","version","description","navigator","serviceWorker","getRegistration","reg","waiting","postMessage","changeset","AppRoute","Component","rest","render","props","pathname","App","route","index","exact","registerValidSW","swUrl","config","installingWorker","handleUpdate","register","registration","state","onupdatefound","installing","onstatechange","controller","onSuccess","catch","oldRegistration","oldSw","active","olsSwState","addEventListener","refreshing","newRegistration","newSw","newSwState","window","location","reload","isLocalhost","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","URL","href","origin","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.73235df3.chunk.js","sourcesContent":["import { useHistory } from 'react-router-dom';\nconst superagent = require('superagent');\n\nconst ROOT_PROD_URL = 'https://glacial-plateau-65219.herokuapp.com';\nconst sucessObject = { success: true };\nconst failureObject = { success: false };\nconst unhandledErrorMsg = 'Unhandled error while logging in :(';\n\nexport function loginUser(dispatch, loginPayload) {\n  dispatch({ type: 'REQUEST_LOGIN' });\n\n  return superagent\n    .post(`${ROOT_PROD_URL}/login`)\n    .send(loginPayload) // sends a JSON post body\n    .set('Content-Type', 'application/json')\n    .set('Accept', 'application/json')\n    .end((err, res) => {\n      console.log('Login Request: ', err, res);\n\n      const email = res.body.email;\n      if (!err && email) {\n        // Using `Access-Control-Expose-Headers: 'Authorization'` response header,\n        // we are able to grab the Authorization token and save it in memory\n        var token = res.headers['Authorization'];\n        dispatch({ type: 'LOGIN_SUCCESS', payload: { email: email, token: token } });\n        localStorage.setItem('currentUserEmail', email);\n        localStorage.setItem('currentUserToken', token);\n        let history = useHistory();\n        history.push('/dashboard');\n\n        return sucessObject;\n      }\n\n      dispatch({ type: 'LOGIN_ERROR', error: res.body.message || unhandledErrorMsg });\n      return failureObject;\n    });\n}\n\nexport async function checkAuth(dispatch) {\n  const token = localStorage.getItem('currentUserToken') || '';\n  const requestOptions = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      'Authorization': token  // Stored in the format: `Bearer ${token}`\n    }\n  };\n\n  try {\n    dispatch({ type: 'REQUEST_AUTH' });\n    let response = await fetch(`${ROOT_PROD_URL}/users/check`, requestOptions);\n    await response.json();\n  } catch (error) {\n    debugger\n  }\n}\n\nexport async function logout(dispatch) {\n  dispatch({ type: 'LOGOUT' });\n  localStorage.removeItem('currentUserEmail');\n  localStorage.removeItem('currentUserToken');\n}\n","let email = localStorage.getItem('currentUserEmail') || '';\nlet token = localStorage.getItem('currentUserToken') || '';\n\nexport const initialState = {\n  email: '' || email,\n  token: '' || token,\n  loading: false,\n  errorMessage: null\n};\n\nexport const AuthReducer = (initialState, action) => {\n  switch (action.type) {\n    case 'REQUEST_LOGIN':\n    case 'REQUEST_AUTH':\n      return {\n        ...initialState,\n        loading: true,\n        errorMessage: null\n      };\n    case 'LOGIN_SUCCESS':\n      return {\n        ...initialState,\n        email: action.payload.email,\n        token: action.payload.token,\n        loading: false,\n        errorMessage: null\n      };\n    case 'LOGOUT':\n      return {\n        ...initialState,\n        email: '',\n        token: '',\n        errorMessage: null\n      };\n\n    case 'LOGIN_ERROR':\n      return {\n        ...initialState,\n        loading: false,\n        errorMessage: action.error\n      };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { AuthReducer, initialState } from './reducer';\n\nconst AuthStateContext = createContext();\nconst AuthDispatchContext = createContext();\n\nexport function useAuthState() {\n  const context = useContext(AuthStateContext);\n  if (context === undefined) {\n    throw new Error('useAuthState must be used within a AuthProvider');\n  }\n\n  return context;\n}\n\nexport function useAuthDispatch() {\n  const context = useContext(AuthDispatchContext);\n  if (context === undefined) {\n    throw new Error('useAuthDispatch must be used within a AuthProvider');\n  }\n\n  return context;\n}\n\nexport const AuthProvider = ({ children }) => {\n  const [user, dispatch] = useReducer(AuthReducer, initialState);\n\n  return (\n    <AuthStateContext.Provider value={user}>\n      <AuthDispatchContext.Provider value={dispatch}>\n        {children}\n      </AuthDispatchContext.Provider>\n    </AuthStateContext.Provider>\n  );\n};\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useAuthState } from '../Context';\n\nconst Nav = () => {\n  const userDetails = useAuthState();\n\n  return (\n    <nav className='navbar is-light' role='navigation' aria-label='main navigation'>\n      <div className='navbar-brand'>\n        <div className='has-text-primary is-size-3 p-2'>\n          DualTrack\n        </div>\n\n        <div role='button' className='navbar-burger' aria-label='menu' aria-expanded='false' data-target='navbar-menu'>\n          <span aria-hidden='true'></span>\n          <span aria-hidden='true'></span>\n          <span aria-hidden='true'></span>\n        </div>\n      </div>\n\n      <div id='navbar-menu' className='navbar-menu'>\n        <div className='navbar-start'>\n          {Boolean(userDetails.email) && (\n            <>\n              <NavLink to='/dashboard' className='navbar-item' activeClassName='is-active'>Dashboard</NavLink>\n              <NavLink to='/settings' className='navbar-item' activeClassName='is-active'>Settings</NavLink>\n            </>\n          )}\n        </div>\n\n        <div className='navbar-end'>\n          <div className='navbar-item'>\n            <div className='buttons'>\n              {!Boolean(userDetails.email) && (\n                <NavLink to='/login' className='button is-light' activeClassName='is-active'>Login</NavLink>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react'\nimport { logout, checkAuth, useAuthDispatch, useAuthState } from '../Context';\n\nconst Dashboard = ({ history }) => {\n  const dispatch = useAuthDispatch();\n  const userDetails = useAuthState();\n\n  const handleLogout = () => {\n    logout(dispatch); //call the logout action\n    history.push('/login'); //navigate to logout page on logout\n  };\n\n  return (\n    <div>\n      <div className='' >\n        <h1 className='is-size-1 mb-5'>\n          Dashboard\n        </h1>\n\n        <div className='buttons'>\n          <button className='button is-default' onClick={handleLogout}>\n            Logout\n          </button>\n\n          <button className='button is-default' onClick={() => checkAuth(dispatch)}>\n            Check Auth\n          </button>\n        </div>\n      </div>\n\n      <p>\n        {`Welcome to the dashboard ${userDetails.email}!`}\n      </p>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import React, { useState, useEffect } from 'react';\nimport { loginUser, useAuthDispatch, useAuthState } from '../Context';\n\nconst Login = ({ history }) => {\n  const { email, loading, errorMessage } = useAuthState();\n\n  useEffect(() => {\n    if (email) {\n      history.push('/dashboard');\n    }\n  }, [email, history]);\n\n  const [localEmail, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const dispatch = useAuthDispatch();\n  const handleLogin = async (e) => {\n    e.preventDefault()\n    let payload = {\n      user: {\n        password,\n        email: localEmail\n      }\n    };\n\n    loginUser(dispatch, payload);\n  }\n\n  return (\n    <div className='columns is-centered'>\n      <div className='column is-half'>\n        {errorMessage && <p className='notification is-danger'>{errorMessage}</p>}\n\n        <form>\n          <div className='field'>\n            <label className='label' htmlFor='email'>Email</label>\n            <div className='control'>\n              <input\n                className='input'\n                autoComplete='email'\n                required\n                type='text'\n                id='email'\n                disabled={loading}\n                value={localEmail}\n                onChange={(e) => setEmail(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <div className='field'>\n            <label className='label' htmlFor='password'>Password</label>\n            <div className='control'>\n              <input\n                className='input'\n                autoComplete='current-password'\n                required\n                type='password'\n                id='password'\n                disabled={loading}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n            </div>\n          </div>\n\n          <button\n            type='submit'\n            className='button is-primary mt-5'\n            onClick={handleLogin}\n            disabled={loading}\n          >\n            Login\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <h1 className='is-size-1 mb-5'>Page not found</h1>\n  );\n}\n\nexport default NotFound;\n","import Dashboard from '../Pages/Dashboard';\nimport Login from '../Pages/Login';\nimport NotFound from '../Pages/NotFound';\nimport Settings from '../Pages/Settings';\n\nconst routes =[\n  {\n    path:'/',\n    component: Login,\n    isPrivate: false\n  },\n  {\n    path:'/login',\n    component: Login,\n    isPrivate: false\n  },\n  {\n    path:'/dashboard',\n    component: Dashboard,\n    isPrivate: true\n  },\n  {\n    path:'/settings',\n    component: Settings,\n    isPrivate: true\n  },\n  {\n    path:'/*',\n    component: NotFound,\n    isPrivate: false\n  },\n]\n \nexport default routes;\n","import React, { useState, useEffect } from 'react';\nimport { satisfies } from 'es-semver';\nimport { addPwaUpdateListener } from 'pwa-helper-components';\n\nconst Settings = () => {\n  const [ changelog, setChangelog] = useState(null);\n  const [ updateAvailable, setAvailable] = useState(false);\n\n  addPwaUpdateListener((updateAvailable) => {\n    setAvailable(updateAvailable);\n  });\n\n  useEffect(() => {\n    const path = document.getElementById('changelog-path').dataset.path;\n    fetch(path)\n      .then(res => res.json())\n      .then(changelog => {\n        const relevantVersions = Object.keys(changelog).filter(item => satisfies(item, `>${process.env.REACT_APP_VERSION}`));\n        const finalChangelog = relevantVersions.map(version => ({\n          version,\n          description: changelog[version].description\n        }));\n        setChangelog(finalChangelog);\n      });\n  }, []);\n\n  const refreshApp = function() {\n    navigator.serviceWorker.getRegistration()\n      .then(reg => {\n        reg.waiting.postMessage({ type: 'SKIP_WAITING' });\n        // We assume it just works :)\n        setAvailable(false);\n      });\n  }\n\n  return (\n    <>\n      <h1 className='is-size-1 mb-5'>My Settings</h1>\n\n      <div className='level mb-5'>\n        <div className='level-item has-text-centered'>\n          <div>\n            <p className='heading'>Tweets</p>\n            <p className='title'>3,456</p>\n          </div>\n        </div>\n        <div className='level-item has-text-centered'>\n          <div>\n            <p className='heading'>Following</p>\n            <p className='title'>123</p>\n          </div>\n        </div>\n        <div className='level-item has-text-centered'>\n          <div>\n            <p className='heading'>Followers</p>\n            <p className='title'>456K</p>\n          </div>\n        </div>\n        <div className='level-item has-text-centered'>\n          <div>\n            <p className='heading'>Likes</p>\n            <p className='title'>789</p>\n          </div>\n        </div>\n      </div>\n\n      <hr />\n\n      {updateAvailable && (\n        <>\n          <div id='new-version-refresh-notification' className='mb-5'>\n            <div className='notification is-info is-light is-flex is-align-items-center'>\n              A new version of DualTrack is available\n\n              <div className='button is-light ml-2' id='new-version-refresh-button' onClick={refreshApp}>\n                Refresh to Update\n              </div>\n            </div>\n          </div>\n\n          {changelog && changelog.map(changeset => (\n            <div key={changeset.version} className='box'>\n              <h3 className='is-size-3'>{changeset.version}</h3>\n              <p>{changeset.description}</p>\n            </div>\n          ))}\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Settings;\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport { useAuthState } from '../Context';\n\nconst AppRoute = ({ component: Component, path, isPrivate, ...rest }) => {\n  const userDetails = useAuthState();\n  return (\n    <Route\n      path={path}\n      render={props =>\n        isPrivate && !Boolean(userDetails.email) ? (\n          <Redirect to={{ pathname: '/login' }} />\n        ) : (\n          <Component {...props} />\n        )\n      }\n      {...rest}\n    />\n  )\n}\n\nexport default AppRoute;\n","import React from 'react';\nimport './App.scss';\nimport './Styles/General.css';\nimport { Switch } from 'react-router-dom';\nimport Nav from './Components/Nav';\nimport routes from './Config/routes.js';\nimport AppRoute from './Components/AppRoute';\n\nfunction App() {\n  return (\n    <div className='app-container'>\n      <Nav />\n\n      <div className='container is-widescreen pt-5'>\n        <Switch>\n          {routes.map((route, index) => (\n            <AppRoute\n              exact\n              key={index}\n              {...route}\n            />\n          ))}\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  let installingWorker;\n  // Documentation: https://deanhume.com/displaying-a-new-version-available-progressive-web-app\n\n  handleUpdate();\n\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      console.log('[Registering SW]: ', registration);\n      if (registration.waiting && registration.waiting.state === 'installed') {\n        // The service worker is installed and we just need to activate it\n        // Case handled by the settings page update interface\n      }\n\n      registration.onupdatefound = () => {\n        installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, we know there is a new version ready so\n              // we can show a notification in the settings page to update\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nasync function handleUpdate() {\n  if ('serviceWorker' in navigator) {\n    let refreshing;\n\n    // https://dev.to/thepassle/on-pwa-update-patterns-4fgm\n    // check to see if there is a current active service worker\n    const oldRegistration = await navigator.serviceWorker.getRegistration()\n    const oldSw = oldRegistration && oldRegistration.active;\n    const olsSwState = oldSw && oldSw.state;\n\n    navigator.serviceWorker.addEventListener('controllerchange', async () => {\n      if (refreshing) return;\n\n      // when the controllerchange event has fired, we get the new service worker\n      const newRegistration = (await navigator.serviceWorker.getRegistration())?.active?.state;\n      const newSw = newRegistration && newRegistration.active;\n      const newSwState = newSw && newSw.state;\n\n      // if there was already an old activated service worker, and a new activating service worker, do the reload\n      if(olsSwState === 'activated' && newSwState === 'activating') {\n        refreshing = true;\n        window.location.reload();\n      }\n    });\n  }\n}\n\n//////////////////\n// LOCAL ENV ONLY!\n//////////////////\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { AuthProvider } from './Context';\nimport { makeServer } from './Config/mockServer';\n\nif (process.env.NODE_ENV === 'development') {\n  makeServer({ environment: 'development' })\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}